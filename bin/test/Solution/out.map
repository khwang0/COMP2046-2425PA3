Add_new_books -> a:
    javax.swing.JPanel contentPane -> a
    33:43:void main(java.lang.String[]) -> main
    48:224:void <init>() -> <init>
Add_new_books$1 -> a$1:
    33:33:void <init>() -> <init>
    36:41:void run() -> run
Add_new_books$2 -> a$2:
    javax.swing.JButton val$btnNewButton -> a
    javax.swing.JTextArea val$bkname -> b
    javax.swing.JTextArea val$wrtrname -> c
    javax.swing.JTextArea val$src -> d
    javax.swing.JTextArea val$publs -> e
    javax.swing.JComboBox val$sub -> f
    javax.swing.JTextArea val$price -> g
    javax.swing.JComboBox val$date -> h
    javax.swing.JComboBox val$month -> i
    javax.swing.JComboBox val$year -> j
    Add_new_books this$0 -> k
    188:188:void <init>(Add_new_books,javax.swing.JButton,javax.swing.JTextArea,javax.swing.JTextArea,javax.swing.JTextArea,javax.swing.JTextArea,javax.swing.JComboBox,javax.swing.JTextArea,javax.swing.JComboBox,javax.swing.JComboBox,javax.swing.JComboBox) -> <init>
    190:219:void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
Add_old_books -> b:
    javax.swing.JPanel contentPane -> a
    33:43:void main(java.lang.String[]) -> main
    48:224:void <init>() -> <init>
Add_old_books$1 -> b$1:
    33:33:void <init>() -> <init>
    36:41:void run() -> run
Add_old_books$2 -> b$2:
    javax.swing.JButton val$btnNewButton -> a
    javax.swing.JTextArea val$bkname -> b
    javax.swing.JTextArea val$wrtrname -> c
    javax.swing.JTextArea val$src -> d
    javax.swing.JTextArea val$publs -> e
    javax.swing.JComboBox val$sub -> f
    javax.swing.JTextArea val$price -> g
    javax.swing.JComboBox val$date -> h
    javax.swing.JComboBox val$month -> i
    javax.swing.JComboBox val$year -> j
    Add_old_books this$0 -> k
    188:188:void <init>(Add_old_books,javax.swing.JButton,javax.swing.JTextArea,javax.swing.JTextArea,javax.swing.JTextArea,javax.swing.JTextArea,javax.swing.JComboBox,javax.swing.JTextArea,javax.swing.JComboBox,javax.swing.JComboBox,javax.swing.JComboBox) -> <init>
    190:219:void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
Address -> c:
    javax.swing.JPanel contentPane -> e
    java.lang.String name -> a
    java.lang.String pin -> b
    java.lang.String addl -> c
    java.lang.String landmark -> d
    34:44:void main(java.lang.String[]) -> main
    49:133:void <init>() -> <init>
Address$1 -> c$1:
    34:34:void <init>() -> <init>
    37:42:void run() -> run
Address$2 -> c$2:
    javax.swing.JButton val$btnAdd -> a
    javax.swing.JTextArea val$namet -> b
    javax.swing.JTextArea val$pint -> c
    javax.swing.JEditorPane val$editorPane -> d
    javax.swing.JTextArea val$landmarkt -> e
    Address this$0 -> f
    101:101:void <init>(Address,javax.swing.JButton,javax.swing.JTextArea,javax.swing.JTextArea,javax.swing.JEditorPane,javax.swing.JTextArea) -> <init>
    104:129:void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
AdminHost -> d:
    javax.swing.JPanel contentPane -> a
    javax.swing.JTable table -> b
    40:50:void main(java.lang.String[]) -> main
    55:206:void <init>() -> <init>
AdminHost$1 -> d$1:
    40:40:void <init>() -> <init>
    43:48:void run() -> run
AdminHost$2 -> d$2:
    AdminHost this$0 -> a
    75:75:void <init>(AdminHost) -> <init>
    77:79:void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
AdminHost$3 -> d$3:
    AdminHost this$0 -> a
    84:84:void <init>(AdminHost) -> <init>
    86:88:void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
AdminHost$4 -> d$4:
    javax.swing.JButton val$btnNewButton -> a
    AdminHost this$0 -> b
    117:117:void <init>(AdminHost,javax.swing.JButton) -> <init>
    119:128:void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
AdminHost$5 -> d$5:
    AdminHost this$0 -> a
    135:135:void <init>(AdminHost) -> <init>
    137:139:void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
AdminHost$6 -> d$6:
    AdminHost this$0 -> a
    146:146:void <init>(AdminHost) -> <init>
    148:150:void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
AdminHost$7 -> d$7:
    AdminHost this$0 -> a
    157:157:void <init>(AdminHost) -> <init>
    159:161:void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
AdminHost$8 -> d$8:
    AdminHost this$0 -> a
    173:173:void <init>(AdminHost) -> <init>
    175:175:void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
AdminHost$9 -> d$9:
    AdminHost this$0 -> a
    182:182:void <init>(AdminHost) -> <init>
    184:184:void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
AdminLogin -> e:
    javax.swing.JPanel contentPane -> a
    javax.swing.JTextField textField -> b
    javax.swing.JPasswordField passwordField -> c
    javax.swing.JButton btnNewButton -> d
    javax.swing.JButton btnNewButton_1 -> e
    java.lang.String[] user -> f
    java.lang.String[] pass -> g
    javax.swing.JLabel lblNewLabel_1 -> h
    javax.swing.JLabel label -> i
    javax.swing.JLabel label_1 -> j
    37:48:void main(java.lang.String[]) -> main
    28:144:void <init>() -> <init>
    21:21:javax.swing.JTextField access$000(AdminLogin) -> a
    21:21:javax.swing.JPasswordField access$100(AdminLogin) -> b
    21:21:javax.swing.JButton access$200(AdminLogin) -> c
AdminLogin$1 -> e$1:
    37:37:void <init>() -> <init>
    40:46:void run() -> run
AdminLogin$2 -> e$2:
    AdminLogin this$0 -> a
    98:98:void <init>(AdminLogin) -> <init>
    102:119:void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
AdminLogin$3 -> e$3:
    AdminLogin this$0 -> a
    125:125:void <init>(AdminLogin) -> <init>
    127:131:void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
Book_selling_system -> f:
    9:9:void <init>() -> <init>
    14:17:void main(java.lang.String[]) -> main
BuyBooks -> g:
    javax.swing.JPanel contentPane -> a
    31:41:void main(java.lang.String[]) -> main
    46:85:void <init>() -> <init>
BuyBooks$1 -> g$1:
    31:31:void <init>() -> <init>
    34:39:void run() -> run
BuyBooks$2 -> g$2:
    BuyBooks this$0 -> a
    74:74:void <init>(BuyBooks) -> <init>
    76:81:void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
Create_ac -> h:
    javax.swing.JPanel contentPane -> a
    javax.swing.JTextField firstname -> b
    javax.swing.JTextField lastname -> c
    javax.swing.JTextField email -> d
    javax.swing.JTextField username -> e
    javax.swing.JTextField mob -> f
    javax.swing.JPasswordField passwordField -> g
    javax.swing.JButton btnNewButton -> h
    javax.swing.JButton btnNewButton_1 -> i
    javax.swing.JButton btnNewButton_2 -> j
    javax.swing.JLabel label -> k
    45:55:void main(java.lang.String[]) -> main
    61:246:void <init>() -> <init>
    27:27:javax.swing.JTextField access$000(Create_ac) -> a
    27:27:javax.swing.JTextField access$100(Create_ac) -> b
    27:27:javax.swing.JTextField access$200(Create_ac) -> c
    27:27:javax.swing.JTextField access$300(Create_ac) -> d
    27:27:javax.swing.JTextField access$400(Create_ac) -> e
    27:27:javax.swing.JPasswordField access$500(Create_ac) -> f
    27:27:javax.swing.JButton access$600(Create_ac) -> g
Create_ac$1 -> h$1:
    45:45:void <init>() -> <init>
    48:53:void run() -> run
Create_ac$2 -> h$2:
    Create_ac this$0 -> a
    151:151:void <init>(Create_ac) -> <init>
    153:217:void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
Create_ac$3 -> h$3:
    Create_ac this$0 -> a
    224:224:void <init>(Create_ac) -> <init>
    226:230:void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
Main_screen -> i:
    long serialVersionUID -> a
    javax.swing.JPanel contentPane -> b
    33:47:void main(java.lang.String[]) -> main
    52:115:void <init>() -> <init>
Main_screen$1 -> i$1:
    33:33:void <init>() -> <init>
    37:44:void run() -> run
Main_screen$2 -> i$2:
    Main_screen this$0 -> a
    72:72:void <init>(Main_screen) -> <init>
    74:74:void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
Main_screen$3 -> i$3:
    Main_screen this$0 -> a
    77:77:void <init>(Main_screen) -> <init>
    79:83:void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
Main_screen$4 -> i$4:
    Main_screen this$0 -> a
    91:91:void <init>(Main_screen) -> <init>
    93:97:void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
ModernArt -> j:
    int[][] PRE_DEAL -> a
    int ROUND -> b
    int INITIAL_MONEY -> c
    int[] INITIAL_COUNT -> d
    int[] SCORES -> e
    int MAX_PAINTINGS -> f
    int noOfPlayers -> g
    Player[] players -> h
    java.util.List deck -> i
    int[][] scoreboard -> j
    72:84:void main(java.lang.String[]) -> main
    86:87:void <init>() -> <init>
    65:95:void <init>(int) -> <init>
    97:102:void prepareDeck() -> a
    104:109:void dealPainting(int) -> a
    111:148:int[] updateScoreboard(int,int[]) -> a
    151:205:void startgame() -> b
    207:213:void shuffle(java.util.List) -> a
    219:219:int[][] getScoreboard() -> c
    16:47:void <clinit>() -> <clinit>
Painting -> k:
    int artist_id -> b
    java.lang.String TYPE -> c
    Player owner -> d
    Player currentBidder -> e
    int currentBid -> f
    java.lang.String[] ARTIST_NAMES -> a
    3:12:void <init>(int) -> <init>
    14:14:int getArtistId() -> a
    17:18:void setOwner(Player) -> a
    20:20:Player getOwner() -> b
    23:23:java.lang.String getArtistName() -> c
    26:40:void sold() -> d
    42:42:java.lang.String toString() -> toString
    46:59:void auction(Player[]) -> a
    61:66:boolean bid(int,Player) -> a
    7:7:void <clinit>() -> <clinit>
Player -> l:
    java.lang.String name -> a
    int money -> b
    int totalPlayers -> c
    java.util.List handPaintings -> d
    java.util.List boughtPaintings -> e
    11:16:void <init>(int) -> <init>
    18:20:void dealPaintings(Painting) -> a
    22:22:java.lang.String getName() -> a
    25:30:Painting removePaintingFromHand(int) -> d
    33:52:Painting playPainting() -> b
    55:55:int getMoney() -> c
    58:71:int bid(int) -> a
    74:75:void pay(int) -> b
    77:78:void earn(int) -> c
    80:80:java.lang.String toString() -> toString
    83:84:void buyPainting(Painting) -> b
    86:90:void sellPainting(int[]) -> a
    9:9:void <clinit>() -> <clinit>
Request -> m:
    javax.swing.JPanel contentPane -> a
    javax.swing.JTextField textField -> b
    32:42:void main(java.lang.String[]) -> main
    47:96:void <init>() -> <init>
    23:23:javax.swing.JTextField access$000(Request) -> a
Request$1 -> m$1:
    32:32:void <init>() -> <init>
    35:40:void run() -> run
Request$2 -> m$2:
    javax.swing.JTextArea val$textArea -> a
    javax.swing.JButton val$btnRequest -> b
    Request this$0 -> c
    74:74:void <init>(Request,javax.swing.JTextArea,javax.swing.JButton) -> <init>
    76:91:void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
Show_bookings -> n:
    javax.swing.JPanel contentPane -> a
    javax.swing.JTable table -> b
    28:38:void main(java.lang.String[]) -> main
    22:67:void <init>() -> <init>
Show_bookings$1 -> n$1:
    28:28:void <init>() -> <init>
    31:36:void run() -> run
UserHost -> o:
    javax.swing.JPanel contentPane -> a
    javax.swing.JTable table -> b
    33:43:void main(java.lang.String[]) -> main
    48:194:void <init>() -> <init>
UserHost$1 -> o$1:
    33:33:void <init>() -> <init>
    36:41:void run() -> run
UserHost$2 -> o$2:
    UserHost this$0 -> a
    68:68:void <init>(UserHost) -> <init>
    70:72:void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
UserHost$3 -> o$3:
    UserHost this$0 -> a
    77:77:void <init>(UserHost) -> <init>
    79:81:void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
UserHost$4 -> o$4:
    javax.swing.JButton val$btnNewButton -> a
    UserHost this$0 -> b
    110:110:void <init>(UserHost,javax.swing.JButton) -> <init>
    112:121:void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
UserHost$5 -> o$5:
    UserHost this$0 -> a
    128:128:void <init>(UserHost) -> <init>
    130:132:void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
UserHost$6 -> o$6:
    UserHost this$0 -> a
    138:138:void <init>(UserHost) -> <init>
    140:142:void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
UserHost$7 -> o$7:
    UserHost this$0 -> a
    149:149:void <init>(UserHost) -> <init>
    151:153:void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
UserHost$8 -> o$8:
    UserHost this$0 -> a
    160:160:void <init>(UserHost) -> <init>
    162:164:void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
Userlogin -> p:
    javax.swing.JPanel contentPane -> a
    javax.swing.JTextField textField -> b
    javax.swing.JPasswordField passwordField -> c
    javax.swing.JButton btnNewButton -> d
    javax.swing.JButton btnNewButton_1 -> e
    javax.swing.JButton btnNewButton_2 -> f
    javax.swing.JButton btnNewButton_3 -> g
    63:74:void main(java.lang.String[]) -> main
    79:292:void <init>() -> <init>
    50:50:javax.swing.JTextField access$000(Userlogin) -> a
    50:50:javax.swing.JPasswordField access$100(Userlogin) -> b
Userlogin$1 -> p$1:
    63:63:void <init>() -> <init>
    66:72:void run() -> run
Userlogin$2 -> p$2:
    Userlogin this$0 -> a
    123:123:void <init>(Userlogin) -> <init>
    125:245:void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
Userlogin$3 -> p$3:
    Userlogin this$0 -> a
    251:251:void <init>(Userlogin) -> <init>
    253:257:void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
Userlogin$4 -> p$4:
    Userlogin this$0 -> a
    265:265:void <init>(Userlogin) -> <init>
    267:271:void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
Userlogin$5 -> p$5:
    Userlogin this$0 -> a
    278:278:void <init>(Userlogin) -> <init>
    280:280:void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.thealgorithms.audiofilters.IIRFilter -> com.a.a.a:
    int order -> a
    double[] coeffsA -> b
    double[] coeffsB -> c
    double[] historyX -> d
    double[] historyY -> e
    23:40:void <init>(int) -> <init>
    52:74:void setCoeffs(double[],double[]) -> a
    83:101:double process(double) -> a
com.thealgorithms.backtracking.Combination -> com.a.b.a:
    int length -> a
    9:9:void <init>() -> <init>
    21:29:java.util.List combination(java.lang.Object[],int) -> a
    46:59:void backtracking(java.lang.Object[],int,java.util.TreeSet,java.util.List) -> a
com.thealgorithms.backtracking.FloodFill -> com.a.b.b:
    7:7:void <init>() -> <init>
    18:18:int getPixel(int[][],int,int) -> a
    29:30:void putPixel(int[][],int,int,int) -> a
    48:65:void floodFill(int[][],int,int,int,int) -> a
com.thealgorithms.backtracking.KnightsTour -> com.a.b.c:
    int base -> a
    int[][] moves -> b
    int[][] grid -> c
    int total -> d
    26:26:void <init>() -> <init>
    43:64:void main(java.lang.String[]) -> main
    68:100:boolean solve(int,int,int) -> a
    105:115:java.util.List neighbors(int,int) -> a
    120:126:int countNeighbors(int,int) -> b
    131:139:boolean orphanDetected(int,int,int) -> b
    144:153:void printResult() -> a
    29:29:void <clinit>() -> <clinit>
com.thealgorithms.backtracking.KnightsTour$1 -> com.a.b.c$1:
    80:80:void <init>() -> <init>
    82:82:int compare(int[],int[]) -> a
    80:80:int compare(java.lang.Object,java.lang.Object) -> compare
com.thealgorithms.backtracking.MazeRecursion -> com.a.b.d:
    3:3:void <init>() -> <init>
    7:74:void mazeRecursion() -> a
    97:121:boolean setWay(int[][],int,int) -> a
    127:151:boolean setWay2(int[][],int,int) -> b
com.thealgorithms.backtracking.NQueens -> com.a.b.e:
    35:35:void <init>() -> <init>
    38:44:void main(java.lang.String[]) -> main
    47:65:void placeQueens(int) -> a
    81:103:void getSolution(int,java.util.List,int[],int) -> a
    119:125:boolean isPlacedCorrectly(int[],int,int) -> a
    62:64:void lambda$placeQueens$1(java.util.List) -> a
    62:62:void lambda$null$0(java.lang.String) -> a
com.thealgorithms.backtracking.Permutation -> com.a.b.f:
    10:10:void <init>() -> <init>
    19:22:java.util.List permutation(java.lang.Object[]) -> a
    33:41:void backtracking(java.lang.Object[],int,java.util.List) -> a
    51:54:void swap(int,int,java.lang.Object[]) -> a
com.thealgorithms.backtracking.PowerSum -> com.a.b.g:
    int count -> a
    int sum -> b
    11:32:void <init>() -> <init>
    14:30:void main(java.lang.String[]) -> main
    35:36:int powSum(int,int) -> a
    42:56:void Sum(int,int,int) -> a
    60:60:int power(int,int) -> b
com.thealgorithms.ciphers.AESEncryption -> com.a.c.a:
    char[] HEX_ARRAY -> a
    javax.crypto.Cipher aesCipher -> b
    15:15:void <init>() -> <init>
    26:39:void main(java.lang.String[]) -> main
    50:52:javax.crypto.SecretKey getSecretEncryptionKey() -> a
    68:70:byte[] encryptText(java.lang.String,javax.crypto.SecretKey) -> a
    82:86:java.lang.String decryptText(byte[],javax.crypto.SecretKey) -> a
    97:103:java.lang.String bytesToHex(byte[]) -> a
    17:17:void <clinit>() -> <clinit>
com.thealgorithms.ciphers.AffineCipher -> com.a.c.b:
    int a -> a
    int b -> b
    3:3:void <init>() -> <init>
    11:24:java.lang.String encryptMessage(char[]) -> a
    28:58:java.lang.String decryptCipher(java.lang.String) -> a
    63:73:void main(java.lang.String[]) -> main
    6:7:void <clinit>() -> <clinit>
com.thealgorithms.ciphers.Blowfish -> com.a.c.c:
    java.lang.String[][] S -> a
    java.lang.String[] P -> b
    long modVal -> c
    11:1072:void <init>() -> <init>
    1081:1094:java.lang.String hexToBin(java.lang.String) -> a
    1104:1108:java.lang.String binToHex(java.lang.String) -> b
    1118:1124:java.lang.String xor(java.lang.String,java.lang.String) -> c
    1134:1140:java.lang.String addBin(java.lang.String,java.lang.String) -> d
    1149:1162:java.lang.String f(java.lang.String) -> c
    1167:1174:void keyGenerate(java.lang.String) -> d
    1179:1189:java.lang.String round(int,java.lang.String) -> a
    1202:1211:java.lang.String encrypt(java.lang.String,java.lang.String) -> a
    1224:1233:java.lang.String decrypt(java.lang.String,java.lang.String) -> b
com.thealgorithms.ciphers.Caesar -> com.a.c.d:
    13:13:void <init>() -> <init>
    22:42:java.lang.String encode(java.lang.String,int) -> a
    52:69:java.lang.String decode(java.lang.String,int) -> b
    76:76:boolean IsCapitalLatinLetter(char) -> a
    83:83:boolean IsSmallLatinLetter(char) -> b
    90:95:java.lang.String[] bruteforce(java.lang.String) -> a
    99:139:void main(java.lang.String[]) -> main
com.thealgorithms.ciphers.HillCipher -> com.a.c.e:
    java.util.Scanner userInput -> a
    13:13:void <init>() -> <init>
    20:63:void encrypt(java.lang.String) -> a
    67:111:void decrypt(java.lang.String) -> b
    115:139:int determinant(int[][],int) -> a
    144:156:void hillCipher(java.lang.String) -> c
    159:165:void validateDeterminant(int[][],int) -> b
    170:173:void main(java.lang.String[]) -> main
    15:15:void <clinit>() -> <clinit>
com.thealgorithms.ciphers.Polybius -> com.a.c.f:
    char[][] key -> a
    15:15:void <init>() -> <init>
    27:36:java.lang.String findLocationByCharacter(char) -> a
    40:46:java.lang.String encrypt(java.lang.String) -> a
    50:57:java.lang.String decrypt(java.lang.String) -> b
    17:17:void <clinit>() -> <clinit>
com.thealgorithms.ciphers.ProductCipher -> com.a.c.g:
    5:5:void <init>() -> <init>
    8:70:void main(java.lang.String[]) -> main
com.thealgorithms.ciphers.RSA -> com.a.c.h:
    java.math.BigInteger modulus -> a
    java.math.BigInteger privateKey -> b
    java.math.BigInteger publicKey -> c
    13:28:void main(java.lang.String[]) -> main
    32:34:void <init>(int) -> <init>
    40:41:java.lang.String encrypt(java.lang.String) -> a
    48:48:java.math.BigInteger encrypt(java.math.BigInteger) -> a
    55:57:java.lang.String decrypt(java.lang.String) -> b
    65:65:java.math.BigInteger decrypt(java.math.BigInteger) -> b
    72:87:void generateKeys(int) -> a
com.thealgorithms.ciphers.SimpleSubCipher -> com.a.c.i:
    13:13:void <init>() -> <init>
    23:48:java.lang.String encode(java.lang.String,java.lang.String) -> a
    60:83:java.lang.String decode(java.lang.String,java.lang.String) -> b
    87:93:void main(java.lang.String[]) -> main
com.thealgorithms.ciphers.SimpleSubstitutionCipher -> com.a.c.j:
    15:15:void <init>() -> <init>
    23:48:java.lang.String encode(java.lang.String,java.lang.String) -> a
    58:81:java.lang.String decode(java.lang.String,java.lang.String) -> b
    88:94:void main(java.lang.String[]) -> main
com.thealgorithms.ciphers.Vigenere -> com.a.c.k:
    9:9:void <init>() -> <init>
    12:39:java.lang.String encrypt(java.lang.String,java.lang.String) -> a
    43:67:java.lang.String decrypt(java.lang.String,java.lang.String) -> b
    71:77:void main(java.lang.String[]) -> main
com.thealgorithms.ciphers.a5.BaseLFSR -> com.a.c.a.a:
    int SESSION_KEY_LENGTH -> a
    int FRAME_COUNTER_LENGTH -> b
    void initialize(java.util.BitSet,java.util.BitSet) -> a
    boolean clock() -> a
com.thealgorithms.ciphers.a5.Utils -> com.a.c.a.b:
    9:9:void <init>() -> <init>
    12:20:boolean increment(java.util.BitSet,int) -> a
com.thealgorithms.conversions.AnyBaseToAnyBase -> com.a.d.a:
    int MINIMUM_BASE -> a
    int MAXIMUM_BASE -> b
    16:16:void <init>() -> <init>
    26:69:void main(java.lang.String[]) -> main
    75:129:boolean validForBase(java.lang.String,int) -> a
    145:187:java.lang.String base2base(java.lang.String,int,int) -> a
com.thealgorithms.conversions.AnyBaseToDecimal -> com.a.d.b:
    boolean $assertionsDisabled -> a
    7:7:void <init>() -> <init>
    10:15:void main(java.lang.String[]) -> main
    26:37:int convertToDecimal(java.lang.String,int) -> a
    49:52:int valOfChar(char) -> a
    7:7:void <clinit>() -> <clinit>
com.thealgorithms.conversions.AnytoAny -> com.a.d.c:
    9:9:void <init>() -> <init>
    12:30:void main(java.lang.String[]) -> main
com.thealgorithms.conversions.BinaryToDecimal -> com.a.d.d:
    8:8:void <init>() -> <init>
    16:28:void main(java.lang.String[]) -> main
com.thealgorithms.conversions.BinaryToHexadecimal -> com.a.d.e:
    10:10:void <init>() -> <init>
    21:41:java.lang.String binToHex(int) -> a
    50:56:void main(java.lang.String[]) -> main
com.thealgorithms.conversions.BinaryToOctal -> com.a.d.f:
    10:10:void <init>() -> <init>
    18:23:void main(java.lang.String[]) -> main
    32:45:java.lang.String convertBinaryToOctal(int) -> a
com.thealgorithms.conversions.DecimalToAnyBase -> com.a.d.g:
    11:11:void <init>() -> <init>
    14:36:void main(java.lang.String[]) -> main
    46:59:java.lang.String convertToAnyBase(int,int) -> a
    69:72:char reVal(int) -> a
com.thealgorithms.conversions.DecimalToBinary -> com.a.d.h:
    8:8:void <init>() -> <init>
    16:18:void main(java.lang.String[]) -> main
    25:38:void conventionalConversion() -> a
    45:56:void bitwiseConversion() -> b
com.thealgorithms.conversions.DecimalToHexaDecimal -> com.a.d.i:
    int sizeOfIntInHalfBytes -> a
    int numberOfBitsInAHalfByte -> b
    int halfByte -> c
    char[] hexDigits -> d
    4:4:void <init>() -> <init>
    30:37:java.lang.String decToHex(int) -> a
    42:48:void main(java.lang.String[]) -> main
    9:9:void <clinit>() -> <clinit>
com.thealgorithms.conversions.DecimalToOctal -> com.a.d.j:
    8:8:void <init>() -> <init>
    18:31:void main(java.lang.String[]) -> main
com.thealgorithms.conversions.HexToOct -> com.a.d.k:
    10:10:void <init>() -> <init>
    19:27:int hex2decimal(java.lang.String) -> a
    38:47:int decimal2octal(int) -> a
    58:71:void main(java.lang.String[]) -> main
com.thealgorithms.conversions.HexaDecimalToBinary -> com.a.d.l:
    int LONG_BITS -> a
    4:6:void <init>() -> <init>
    10:15:void convert(java.lang.String) -> a
    18:21:java.lang.String completeDigits(java.lang.String) -> b
    26:44:void main(java.lang.String[]) -> main
com.thealgorithms.conversions.HexaDecimalToDecimal -> com.a.d.m:
    5:5:void <init>() -> <init>
    9:16:int getHexaToDec(java.lang.String) -> a
    23:36:void main(java.lang.String[]) -> main
com.thealgorithms.conversions.IntegerToRoman -> com.a.d.n:
    int[] allArabianRomanNumbers -> a
    java.lang.String[] allRomanNumbers -> b
    10:10:void <init>() -> <init>
    45:60:java.lang.String integerToRoman(int) -> a
    64:65:void main(java.lang.String[]) -> main
    12:27:void <clinit>() -> <clinit>
com.thealgorithms.conversions.OctalToDecimal -> com.a.d.o:
    10:10:void <init>() -> <init>
    18:26:void main(java.lang.String[]) -> main
    37:43:int convertOctalToDecimal(java.lang.String) -> a
com.thealgorithms.conversions.OctalToHexadecimal -> com.a.d.p:
    10:10:void <init>() -> <init>
    19:26:int octToDec(java.lang.String) -> a
    36:46:java.lang.String decimalToHex(int) -> a
    50:62:void main(java.lang.String[]) -> main
com.thealgorithms.conversions.RgbHsvConversion -> com.a.d.q:
    boolean $assertionsDisabled -> a
    16:16:void <init>() -> <init>
    22:85:void main(java.lang.String[]) -> main
    96:120:int[] hsvToRgb(double,double,double) -> a
    137:175:double[] rgbToHsv(int,int,int) -> a
    179:183:boolean approximatelyEqualHsv(double[],double[]) -> a
    196:222:int[] getRgbBySection(double,double,double,double) -> a
    226:226:int convertToInt(double) -> a
    16:16:void <clinit>() -> <clinit>
com.thealgorithms.conversions.RomanToInteger -> com.a.d.r:
    java.util.Map map -> a
    5:5:void <init>() -> <init>
    32:59:int romanToInt(java.lang.String) -> a
    63:65:void main(java.lang.String[]) -> main
    7:7:void <clinit>() -> <clinit>
com.thealgorithms.conversions.RomanToInteger$1 -> com.a.d.r$1:
    long serialVersionUID -> a
    7:20:void <init>() -> <init>
com.thealgorithms.conversions.TurkishToLatinConversion -> com.a.d.s:
    10:10:void <init>() -> <init>
    18:23:void main(java.lang.String[]) -> main
    32:67:java.lang.String convertTurkishToLatin(java.lang.String) -> a
com.thealgorithms.datastructures.bags.Bag -> com.a.e.a.a:
    com.thealgorithms.datastructures.bags.Bag$Node firstElement -> a
    int size -> b
    25:28:void <init>() -> <init>
    34:34:boolean isEmpty() -> a
    41:41:int size() -> b
    48:53:void add(java.lang.Object) -> a
    62:68:boolean contains(java.lang.Object) -> b
    76:76:java.util.Iterator iterator() -> iterator
    114:128:void main(java.lang.String[]) -> main
com.thealgorithms.datastructures.bags.Bag$1 -> com.a.e.a.a$1:
com.thealgorithms.datastructures.bags.Bag$ListIterator -> com.a.e.a.b:
    com.thealgorithms.datastructures.bags.Bag$Node currentElement -> b
    com.thealgorithms.datastructures.bags.Bag this$0 -> a
    84:86:void <init>(com.thealgorithms.datastructures.bags.Bag,com.thealgorithms.datastructures.bags.Bag$Node) -> <init>
    89:89:boolean hasNext() -> hasNext
    97:97:void remove() -> remove
    101:106:java.lang.Object next() -> next
com.thealgorithms.datastructures.bags.Bag$Node -> com.a.e.a.c:
    java.lang.Object content -> a
    com.thealgorithms.datastructures.bags.Bag$Node nextElement -> b
    16:16:void <init>() -> <init>
    16:16:void <init>(com.thealgorithms.datastructures.bags.Bag$1) -> <init>
    16:16:java.lang.Object access$102(com.thealgorithms.datastructures.bags.Bag$Node,java.lang.Object) -> a
    16:16:com.thealgorithms.datastructures.bags.Bag$Node access$202(com.thealgorithms.datastructures.bags.Bag$Node,com.thealgorithms.datastructures.bags.Bag$Node) -> a
    16:16:java.lang.Object access$100(com.thealgorithms.datastructures.bags.Bag$Node) -> a
    16:16:com.thealgorithms.datastructures.bags.Bag$Node access$200(com.thealgorithms.datastructures.bags.Bag$Node) -> b
com.thealgorithms.datastructures.bloomfilter.BloomFilter -> com.a.e.b.a:
    int numberOfHashFunctions -> a
    java.util.BitSet bitArray -> b
    com.thealgorithms.datastructures.bloomfilter.BloomFilter$Hash[] hashFunctions -> c
    11:16:void <init>(int,int) -> <init>
    19:22:void insertHash() -> a
    25:29:void insert(java.lang.Object) -> a
    32:38:boolean contains(java.lang.Object) -> b
com.thealgorithms.datastructures.bloomfilter.BloomFilter$Hash -> com.a.e.b.b:
    int index -> a
    com.thealgorithms.datastructures.bloomfilter.BloomFilter this$0 -> b
    45:47:void <init>(com.thealgorithms.datastructures.bloomfilter.BloomFilter,int) -> <init>
    50:50:int compute(java.lang.Object) -> a
    54:58:int asciiString(java.lang.String) -> a
com.thealgorithms.datastructures.buffers.CircularBuffer -> com.a.e.c.a:
    java.lang.Object[] buffer -> a
    com.thealgorithms.datastructures.buffers.CircularBuffer$CircularPointer putPointer -> b
    com.thealgorithms.datastructures.buffers.CircularBuffer$CircularPointer getPointer -> c
    java.util.concurrent.atomic.AtomicInteger size -> d
    9:16:void <init>(int) -> <init>
    19:19:boolean isEmpty() -> a
    23:23:boolean isFull() -> b
    27:32:java.lang.Object get() -> c
    36:41:boolean put(java.lang.Object) -> a
com.thealgorithms.datastructures.buffers.CircularBuffer$CircularPointer -> com.a.e.c.b:
    int pointer -> a
    int max -> b
    48:51:void <init>(int,int) -> <init>
    54:58:int getAndIncrement() -> a
com.thealgorithms.datastructures.caches.LFUCache -> com.a.e.d.a:
    com.thealgorithms.datastructures.caches.LFUCache$Node head -> a
    com.thealgorithms.datastructures.caches.LFUCache$Node tail -> b
    java.util.Map map -> c
    java.lang.Integer capacity -> d
    int DEFAULT_CAPACITY -> e
    29:35:void <init>() -> <init>
    29:40:void <init>(java.lang.Integer) -> <init>
    49:58:java.lang.Object get(java.lang.Object) -> a
    68:83:void put(java.lang.Object,java.lang.Object) -> a
    91:122:void addNodeWithUpdatedFrequency(com.thealgorithms.datastructures.caches.LFUCache$Node) -> a
    130:141:void removeNode(com.thealgorithms.datastructures.caches.LFUCache$Node) -> b
com.thealgorithms.datastructures.caches.LFUCache$Node -> com.a.e.d.b:
    java.lang.Object key -> b
    java.lang.Object value -> c
    int frequency -> d
    com.thealgorithms.datastructures.caches.LFUCache$Node previous -> e
    com.thealgorithms.datastructures.caches.LFUCache$Node next -> f
    com.thealgorithms.datastructures.caches.LFUCache this$0 -> a
    20:24:void <init>(com.thealgorithms.datastructures.caches.LFUCache,java.lang.Object,java.lang.Object,int) -> <init>
    12:12:int access$000(com.thealgorithms.datastructures.caches.LFUCache$Node) -> a
    12:12:int access$002(com.thealgorithms.datastructures.caches.LFUCache$Node,int) -> a
    12:12:java.lang.Object access$100(com.thealgorithms.datastructures.caches.LFUCache$Node) -> b
    12:12:java.lang.Object access$102(com.thealgorithms.datastructures.caches.LFUCache$Node,java.lang.Object) -> a
    12:12:java.lang.Object access$200(com.thealgorithms.datastructures.caches.LFUCache$Node) -> c
    12:12:com.thealgorithms.datastructures.caches.LFUCache$Node access$302(com.thealgorithms.datastructures.caches.LFUCache$Node,com.thealgorithms.datastructures.caches.LFUCache$Node) -> a
    12:12:com.thealgorithms.datastructures.caches.LFUCache$Node access$402(com.thealgorithms.datastructures.caches.LFUCache$Node,com.thealgorithms.datastructures.caches.LFUCache$Node) -> b
    12:12:com.thealgorithms.datastructures.caches.LFUCache$Node access$400(com.thealgorithms.datastructures.caches.LFUCache$Node) -> d
    12:12:com.thealgorithms.datastructures.caches.LFUCache$Node access$300(com.thealgorithms.datastructures.caches.LFUCache$Node) -> e
com.thealgorithms.datastructures.caches.LRUCache -> com.a.e.d.c:
    java.util.Map data -> a
    com.thealgorithms.datastructures.caches.LRUCache$Entry head -> b
    com.thealgorithms.datastructures.caches.LRUCache$Entry tail -> c
    int cap -> d
    int DEFAULT_CAP -> e
    19:27:void <init>() -> <init>
    19:31:void <init>(int) -> <init>
    34:40:void setCapacity(int) -> a
    43:50:com.thealgorithms.datastructures.caches.LRUCache$Entry evict() -> a
    54:57:void checkCapacity(int) -> b
    60:65:java.lang.Object get(java.lang.Object) -> a
    69:87:void moveNodeToLast(com.thealgorithms.datastructures.caches.LRUCache$Entry) -> a
    90:108:void put(java.lang.Object,java.lang.Object) -> a
    111:120:void addNewEntry(com.thealgorithms.datastructures.caches.LRUCache$Entry) -> b
com.thealgorithms.datastructures.caches.LRUCache$Entry -> com.a.e.d.d:
    com.thealgorithms.datastructures.caches.LRUCache$Entry preEntry -> a
    com.thealgorithms.datastructures.caches.LRUCache$Entry nextEntry -> b
    java.lang.Object key -> c
    java.lang.Object value -> d
    129:129:void <init>() -> <init>
    136:141:void <init>(com.thealgorithms.datastructures.caches.LRUCache$Entry,com.thealgorithms.datastructures.caches.LRUCache$Entry,java.lang.Object,java.lang.Object) -> <init>
    144:144:com.thealgorithms.datastructures.caches.LRUCache$Entry getPreEntry() -> a
    148:149:void setPreEntry(com.thealgorithms.datastructures.caches.LRUCache$Entry) -> a
    152:152:com.thealgorithms.datastructures.caches.LRUCache$Entry getNextEntry() -> b
    156:157:void setNextEntry(com.thealgorithms.datastructures.caches.LRUCache$Entry) -> b
    160:160:java.lang.Object getKey() -> c
    164:165:void setKey(java.lang.Object) -> a
    168:168:java.lang.Object getValue() -> d
    172:173:void setValue(java.lang.Object) -> b
com.thealgorithms.datastructures.caches.MRUCache -> com.a.e.d.e:
    java.util.Map data -> a
    com.thealgorithms.datastructures.caches.MRUCache$Entry head -> b
    com.thealgorithms.datastructures.caches.MRUCache$Entry tail -> c
    int cap -> d
    int DEFAULT_CAP -> e
    18:26:void <init>() -> <init>
    29:35:void setCapacity(int) -> a
    38:41:void checkCapacity(int) -> b
    44:51:com.thealgorithms.datastructures.caches.MRUCache$Entry evict() -> a
    18:56:void <init>(int) -> <init>
    59:64:java.lang.Object get(java.lang.Object) -> a
    68:85:void put(java.lang.Object,java.lang.Object) -> a
    88:97:void addNewEntry(com.thealgorithms.datastructures.caches.MRUCache$Entry) -> a
    100:118:void moveEntryToLast(com.thealgorithms.datastructures.caches.MRUCache$Entry) -> b
com.thealgorithms.datastructures.caches.MRUCache$Entry -> com.a.e.d.f:
    com.thealgorithms.datastructures.caches.MRUCache$Entry preEntry -> a
    com.thealgorithms.datastructures.caches.MRUCache$Entry nextEntry -> b
    java.lang.Object key -> c
    java.lang.Object value -> d
    127:127:void <init>() -> <init>
    134:139:void <init>(com.thealgorithms.datastructures.caches.MRUCache$Entry,com.thealgorithms.datastructures.caches.MRUCache$Entry,java.lang.Object,java.lang.Object) -> <init>
    142:142:com.thealgorithms.datastructures.caches.MRUCache$Entry getPreEntry() -> a
    146:147:void setPreEntry(com.thealgorithms.datastructures.caches.MRUCache$Entry) -> a
    150:150:com.thealgorithms.datastructures.caches.MRUCache$Entry getNextEntry() -> b
    154:155:void setNextEntry(com.thealgorithms.datastructures.caches.MRUCache$Entry) -> b
    158:158:java.lang.Object getKey() -> c
    162:163:void setKey(java.lang.Object) -> a
    166:166:java.lang.Object getValue() -> d
    170:171:void setValue(java.lang.Object) -> b
com.thealgorithms.datastructures.disjointsets.DisjointSets -> com.a.e.e.a:
    3:3:void <init>() -> <init>
    6:6:com.thealgorithms.datastructures.disjointsets.Node MakeSet(java.lang.Object) -> a
    10:14:com.thealgorithms.datastructures.disjointsets.Node FindSet(com.thealgorithms.datastructures.disjointsets.Node) -> a
    18:32:void UnionSet(com.thealgorithms.datastructures.disjointsets.Node,com.thealgorithms.datastructures.disjointsets.Node) -> a
com.thealgorithms.datastructures.disjointsets.Node -> com.a.e.e.b:
    int rank -> a
    com.thealgorithms.datastructures.disjointsets.Node parent -> b
    java.lang.Object data -> c
    9:12:void <init>(java.lang.Object) -> <init>
com.thealgorithms.datastructures.dynamicarray.DynamicArray -> com.a.e.f.a:
    int DEFAULT_CAPACITY -> a
    int capacity -> b
    int size -> c
    java.lang.Object[] elements -> d
    26:30:void <init>(int) -> <init>
    36:37:void <init>() -> <init>
    46:53:void add(java.lang.Object) -> a
    62:63:void put(int,java.lang.Object) -> a
    73:73:java.lang.Object get(int) -> a
    83:90:java.lang.Object remove(int) -> b
    99:99:int getSize() -> a
    108:108:boolean isEmpty() -> b
    112:112:java.util.stream.Stream stream() -> c
    116:129:void fastRemove(java.lang.Object[],int) -> a
    132:132:java.lang.Object getElement(int) -> c
    136:137:int newCapacity(int) -> d
    147:148:java.lang.String toString() -> toString
    159:159:java.util.Iterator iterator() -> iterator
    212:231:void main(java.lang.String[]) -> main
    13:13:int access$100(com.thealgorithms.datastructures.dynamicarray.DynamicArray) -> a
    13:13:java.lang.Object[] access$200(com.thealgorithms.datastructures.dynamicarray.DynamicArray) -> b
    13:13:java.lang.Object access$300(com.thealgorithms.datastructures.dynamicarray.DynamicArray,int) -> a
com.thealgorithms.datastructures.dynamicarray.DynamicArray$1 -> com.a.e.f.a$1:
com.thealgorithms.datastructures.dynamicarray.DynamicArray$DynamicArrayIterator -> com.a.e.f.b:
    int cursor -> b
    com.thealgorithms.datastructures.dynamicarray.DynamicArray this$0 -> a
    162:162:void <init>(com.thealgorithms.datastructures.dynamicarray.DynamicArray) -> <init>
    168:168:boolean hasNext() -> hasNext
    173:184:java.lang.Object next() -> next
    189:195:void remove() -> remove
    199:204:void forEachRemaining(java.util.function.Consumer) -> forEachRemaining
    162:162:void <init>(com.thealgorithms.datastructures.dynamicarray.DynamicArray,com.thealgorithms.datastructures.dynamicarray.DynamicArray$1) -> <init>
com.thealgorithms.datastructures.graphs.AdjacencyList -> com.a.e.g.a:
    java.util.Map adj -> a
    21:23:void <init>() -> <init>
    33:41:void addEdge(java.lang.Comparable,java.lang.Comparable) -> a
    48:48:java.util.ArrayList getAdjacents(java.lang.Comparable) -> a
    55:55:java.util.Set getVertices() -> a
    62:69:void printGraph() -> b
com.thealgorithms.datastructures.graphs.AdjacencyListGraph -> com.a.e.g.b:
    java.util.ArrayList vertices -> a
    9:11:void <init>() -> <init>
    56:66:boolean removeEdge(java.lang.Comparable,java.lang.Comparable) -> a
    78:97:boolean addEdge(java.lang.Comparable,java.lang.Comparable) -> b
    107:119:java.lang.String toString() -> toString
com.thealgorithms.datastructures.graphs.AdjacencyListGraph$Vertex -> com.a.e.g.c:
    java.lang.Comparable data -> a
    java.util.ArrayList adjacentVertices -> b
    com.thealgorithms.datastructures.graphs.AdjacencyListGraph this$0 -> c
    18:21:void <init>(com.thealgorithms.datastructures.graphs.AdjacencyListGraph,java.lang.Comparable) -> <init>
    24:29:boolean addAdjacentVertex(com.thealgorithms.datastructures.graphs.AdjacencyListGraph$Vertex) -> a
    36:42:boolean removeAdjacentVertex(java.lang.Comparable) -> a
com.thealgorithms.datastructures.graphs.AdjacencyMatrixGraph -> com.a.e.g.d:
    int _numberOfVertices -> c
    int _numberOfEdges -> d
    int[][] _adjacency -> e
    int EDGE_EXIST -> a
    int EDGE_NONE -> b
    71:82:void <init>(int) -> <init>
    90:91:void setNumberOfVertices(int) -> d
    99:99:int numberOfVertices() -> a
    109:110:void setNumberOfEdges(int) -> e
    118:118:int numberOfEdges() -> b
    127:128:void setAdjacency(int[][]) -> a
    136:136:int[][] adjacency() -> c
    147:147:boolean adjacencyOfEdgeDoesExist(int,int) -> d
    157:160:boolean vertexDoesExist(int) -> a
    172:176:boolean edgeDoesExist(int,int) -> a
    188:197:boolean addEdge(int,int) -> b
    209:217:boolean removeEdge(int,int) -> c
    229:242:java.util.List depthFirstOrder(int) -> b
    260:280:void depthFirstOrder(int,boolean[],java.util.List) -> a
    291:335:java.util.List breadthFirstOrder(int) -> c
    344:357:java.lang.String toString() -> toString
com.thealgorithms.datastructures.graphs.BellmanFord -> com.a.e.g.e:
    int vertex -> a
    int edge -> b
    com.thealgorithms.datastructures.graphs.BellmanFord$Edge[] edges -> c
    int index -> d
    10:16:void <init>(int,int) -> <init>
    40:45:void printPath(int[],int) -> a
    48:50:void main(java.lang.String[]) -> main
    53:109:void go() -> a
    117:155:void show(int,int,com.thealgorithms.datastructures.graphs.BellmanFord$Edge[]) -> a
    163:164:void addEdge(int,int,int) -> a
    167:167:com.thealgorithms.datastructures.graphs.BellmanFord$Edge[] getEdgeArray() -> b
com.thealgorithms.datastructures.graphs.BellmanFord$Edge -> com.a.e.g.f:
    int u -> a
    int v -> b
    int w -> c
    com.thealgorithms.datastructures.graphs.BellmanFord this$0 -> d
    28:32:void <init>(com.thealgorithms.datastructures.graphs.BellmanFord,int,int,int) -> <init>
com.thealgorithms.datastructures.graphs.BipartiteGrapfDFS -> com.a.e.g.g:
    17:17:void <init>() -> <init>
    25:38:boolean bipartite(int,java.util.ArrayList,int[],int) -> a
    46:56:boolean isBipartite(int,java.util.ArrayList) -> a
    60:88:void main(java.lang.String[]) -> main
com.thealgorithms.datastructures.graphs.ConnectedComponent -> com.a.e.g.h:
    110:110:void <init>() -> <init>
    113:146:void main(java.lang.String[]) -> main
com.thealgorithms.datastructures.graphs.Cycle -> com.a.e.g.i:
    int nodes -> b
    int edges -> c
    int[][] adjacencyMatrix -> d
    boolean[] visited -> e
    java.util.ArrayList cycles -> a
    11:38:void <init>() -> <init>
    41:49:void start() -> a
    52:70:void dfs(java.lang.Integer,java.lang.Integer,java.util.ArrayList) -> a
    73:80:void printAll() -> b
com.thealgorithms.datastructures.graphs.Cycles -> com.a.e.g.j:
    83:83:void <init>() -> <init>
    86:89:void main(java.lang.String[]) -> main
com.thealgorithms.datastructures.graphs.FloydWarshall -> com.a.e.g.k:
    int[][] DistanceMatrix -> b
    int numberofvertices -> c
    int INFINITY -> a
    11:16:void <init>(int) -> <init>
    19:67:void floydwarshall(int[][]) -> a
    70:96:void main(java.lang.String[]) -> main
com.thealgorithms.datastructures.graphs.Graph -> com.a.e.g.l:
    java.util.ArrayList edgeList -> a
    java.util.ArrayList nodeList -> b
    36:39:void <init>() -> <init>
    49:67:void addEdge(java.lang.Comparable,java.lang.Comparable) -> a
    78:89:int countGraphs() -> a
    100:106:java.util.ArrayList depthFirstSearch(com.thealgorithms.datastructures.graphs.Graph$Node,java.util.ArrayList) -> a
com.thealgorithms.datastructures.graphs.Graph$Edge -> com.a.e.g.m:
    com.thealgorithms.datastructures.graphs.Graph$Node startNode -> a
    com.thealgorithms.datastructures.graphs.Graph$Node endNode -> b
    com.thealgorithms.datastructures.graphs.Graph this$0 -> c
    27:30:void <init>(com.thealgorithms.datastructures.graphs.Graph,com.thealgorithms.datastructures.graphs.Graph$Node,com.thealgorithms.datastructures.graphs.Graph$Node) -> <init>
com.thealgorithms.datastructures.graphs.Graph$Node -> com.a.e.g.n:
    java.lang.Comparable name -> a
    com.thealgorithms.datastructures.graphs.Graph this$0 -> b
    18:20:void <init>(com.thealgorithms.datastructures.graphs.Graph,java.lang.Comparable) -> <init>
com.thealgorithms.datastructures.graphs.Graphs -> com.a.e.g.o:
    boolean $assertionsDisabled -> a
    123:123:void <init>() -> <init>
    126:136:void main(java.lang.String[]) -> main
    123:123:void <clinit>() -> <clinit>
com.thealgorithms.datastructures.graphs.HamiltonianCycle -> com.a.e.g.p:
    int V -> a
    int pathCount -> b
    int[] cycle -> c
    int[][] graph -> d
    7:7:void <init>() -> <init>
    21:41:int[] findHamiltonianCycle(int[][]) -> a
    50:82:boolean isPathFound(int) -> a
    90:96:boolean isPresent(int) -> b
com.thealgorithms.datastructures.graphs.KahnsAlgorithm -> com.a.e.g.q:
    133:133:void <init>() -> <init>
    137:151:void main(java.lang.String[]) -> main
com.thealgorithms.datastructures.graphs.Kruskal -> com.a.e.g.r:
    16:16:void <init>() -> <init>
    39:40:void addEdge(java.util.HashSet[],int,int,int) -> a
    43:78:void main(java.lang.String[]) -> main
    81:119:java.util.HashSet[] kruskal(java.util.HashSet[]) -> a
    111:111:void lambda$kruskal$1(int[],com.thealgorithms.datastructures.graphs.Kruskal$Edge,java.lang.Integer) -> a
    87:87:int lambda$kruskal$0(com.thealgorithms.datastructures.graphs.Kruskal$Edge) -> a
com.thealgorithms.datastructures.graphs.Kruskal$Edge -> com.a.e.g.s:
    int from -> a
    int to -> b
    int weight -> c
    26:30:void <init>(int,int,int) -> <init>
    20:20:int access$000(com.thealgorithms.datastructures.graphs.Kruskal$Edge) -> a
    20:20:int access$100(com.thealgorithms.datastructures.graphs.Kruskal$Edge) -> b
    20:20:int access$200(com.thealgorithms.datastructures.graphs.Kruskal$Edge) -> c
com.thealgorithms.datastructures.graphs.MatrixGraphs -> com.a.e.g.t:
    15:15:void <init>() -> <init>
    18:38:void main(java.lang.String[]) -> main
com.thealgorithms.datastructures.graphs.PrimMST -> com.a.e.g.u:
    int V -> a
    7:7:void <init>() -> <init>
    17:26:int minKey(int[],java.lang.Boolean[]) -> a
    32:38:void printMST(int[],int,int[][]) -> a
    44:94:void primMST(int[][]) -> a
    105:116:void main(java.lang.String[]) -> main
com.thealgorithms.datastructures.graphs.TopologicalSort -> com.a.e.g.v:
    com.thealgorithms.datastructures.graphs.AdjacencyList graph -> a
    java.util.Map inDegree -> b
    77:79:void <init>(com.thealgorithms.datastructures.graphs.AdjacencyList) -> <init>
    85:98:void calculateInDegree() -> a
    104:126:java.util.ArrayList topSortOrder() -> b
com.thealgorithms.datastructures.graphs.dijkstras -> com.a.e.g.w:
    int k -> a
    7:9:void <init>() -> <init>
    12:21:int minDist(int[],java.lang.Boolean[]) -> a
    25:29:void print(int[]) -> a
    32:60:void dijkstra(int[][],int) -> a
    63:76:void main(java.lang.String[]) -> main
com.thealgorithms.datastructures.hashmap.hashing.GenericHashMapUsingArray -> com.a.e.h.a.a:
    int size -> a
    java.util.LinkedList[] buckets -> b
    float lf -> c
    11:16:void <init>() -> <init>
    23:27:void initBuckets(int) -> a
    30:46:void put(java.lang.Object,java.lang.Object) -> a
    50:51:int hashFunction(java.lang.Object) -> d
    55:65:void reHash() -> b
    68:80:void remove(java.lang.Object) -> a
    83:83:int size() -> a
    87:94:java.lang.Object get(java.lang.Object) -> b
    99:111:java.lang.String toString() -> toString
    115:115:boolean containsKey(java.lang.Object) -> c
com.thealgorithms.datastructures.hashmap.hashing.GenericHashMapUsingArray$Node -> com.a.e.h.a.b:
    java.lang.Object key -> a
    java.lang.Object value -> b
    com.thealgorithms.datastructures.hashmap.hashing.GenericHashMapUsingArray this$0 -> c
    123:126:void <init>(com.thealgorithms.datastructures.hashmap.hashing.GenericHashMapUsingArray,java.lang.Object,java.lang.Object) -> <init>
com.thealgorithms.datastructures.hashmap.hashing.GenericHashMapUsingArrayList -> com.a.e.h.a.c:
    java.util.ArrayList buckets -> a
    float lf -> b
    int size -> c
    9:18:void <init>() -> <init>
    21:37:void put(java.lang.Object,java.lang.Object) -> a
    40:51:void reHash() -> b
    54:61:java.lang.Object get(java.lang.Object) -> a
    65:77:void remove(java.lang.Object) -> b
    80:80:boolean containsKey(java.lang.Object) -> c
    84:84:int size() -> a
    89:100:java.lang.String toString() -> toString
com.thealgorithms.datastructures.hashmap.hashing.GenericHashMapUsingArrayList$Node -> com.a.e.h.a.d:
    java.lang.Object key -> a
    java.lang.Object val -> b
    com.thealgorithms.datastructures.hashmap.hashing.GenericHashMapUsingArrayList this$0 -> c
    108:111:void <init>(com.thealgorithms.datastructures.hashmap.hashing.GenericHashMapUsingArrayList,java.lang.Object,java.lang.Object) -> <init>
com.thealgorithms.datastructures.hashmap.hashing.HashMap -> com.a.e.h.a.e:
    int hsize -> a
    com.thealgorithms.datastructures.hashmap.hashing.HashMap$LinkedList[] buckets -> b
    8:15:void <init>(int) -> <init>
    18:22:int hashing(int) -> a
    26:28:void insertHash(int) -> b
    31:34:void deleteHash(int) -> c
    37:41:void displayHashtable() -> a
com.thealgorithms.datastructures.hashmap.hashing.HashMap$LinkedList -> com.a.e.h.a.f:
    com.thealgorithms.datastructures.hashmap.hashing.HashMap$Node first -> a
    47:49:void <init>() -> <init>
    52:59:void insert(int) -> a
    62:65:com.thealgorithms.datastructures.hashmap.hashing.HashMap$Node findEnd(com.thealgorithms.datastructures.hashmap.hashing.HashMap$Node) -> a
    69:77:com.thealgorithms.datastructures.hashmap.hashing.HashMap$Node findKey(int) -> b
    81:90:void delete(int) -> c
    93:102:void delete(com.thealgorithms.datastructures.hashmap.hashing.HashMap$Node,int) -> a
    105:105:java.lang.String display() -> a
    109:112:java.lang.String display(com.thealgorithms.datastructures.hashmap.hashing.HashMap$Node) -> b
    117:117:boolean isEmpty() -> b
com.thealgorithms.datastructures.hashmap.hashing.HashMap$Node -> com.a.e.h.a.g:
    com.thealgorithms.datastructures.hashmap.hashing.HashMap$Node next -> a
    int key -> b
    126:129:void <init>(int) -> <init>
    132:132:com.thealgorithms.datastructures.hashmap.hashing.HashMap$Node getNext() -> a
    136:136:int getKey() -> b
    140:141:void setNext(com.thealgorithms.datastructures.hashmap.hashing.HashMap$Node) -> a
    121:121:com.thealgorithms.datastructures.hashmap.hashing.HashMap$Node access$000(com.thealgorithms.datastructures.hashmap.hashing.HashMap$Node) -> b
    121:121:com.thealgorithms.datastructures.hashmap.hashing.HashMap$Node access$002(com.thealgorithms.datastructures.hashmap.hashing.HashMap$Node,com.thealgorithms.datastructures.hashmap.hashing.HashMap$Node) -> a
com.thealgorithms.datastructures.hashmap.hashing.HashMapCuckooHashing -> com.a.e.h.a.h:
    int tableSize -> a
    java.lang.Integer[] buckets -> b
    java.lang.Integer AVAILABLE -> c
    int size -> d
    int thresh -> e
    27:33:void <init>(int) -> <init>
    43:47:int hashFunction1(int) -> a
    51:56:int hashFunction2(int) -> b
    69:124:void insertKey2HashTable(int) -> c
    132:141:void reHashTableIncreasesTableSize() -> a
    149:167:void deleteKeyFromHashTable(int) -> d
    176:186:void displayHashtable() -> b
    195:210:int findKeyInTable(int) -> e
    221:228:boolean checkTableContainsKey(int) -> f
    238:246:double checkLoadFactor() -> c
    255:261:boolean isFull() -> d
    270:277:boolean isEmpty() -> e
    281:281:int getNumberOfKeysInTable() -> f
com.thealgorithms.datastructures.hashmap.hashing.HashMapLinearProbing -> com.a.e.h.a.i:
    int hsize -> a
    java.lang.Integer[] buckets -> b
    java.lang.Integer AVAILABLE -> c
    int size -> d
    22:27:void <init>(int) -> <init>
    36:40:int hashing(int) -> a
    49:70:void insertHash(int) -> b
    78:100:void deleteHash(int) -> c
    106:115:void displayHashtable() -> a
    124:147:int findHash(int) -> d
    151:154:void lengthenTable() -> e
    161:170:void checkLoadFactor() -> b
    178:185:boolean isFull() -> c
    194:201:boolean isEmpty() -> d
com.thealgorithms.datastructures.hashmap.hashing.Intersection -> com.a.e.h.a.j:
    18:34:java.util.List intersection(int[],int[]) -> a
    37:37:void <init>() -> <init>
com.thealgorithms.datastructures.hashmap.hashing.Main -> com.a.e.h.a.k:
    5:5:void <init>() -> <init>
    10:46:void main(java.lang.String[]) -> main
com.thealgorithms.datastructures.hashmap.hashing.MainCuckooHashing -> com.a.e.h.a.l:
    5:5:void <init>() -> <init>
    10:78:void main(java.lang.String[]) -> main
com.thealgorithms.datastructures.hashmap.hashing.MainLinearProbing -> com.a.e.h.a.m:
    5:5:void <init>() -> <init>
    10:64:void main(java.lang.String[]) -> main
com.thealgorithms.datastructures.heaps.EmptyHeapException -> com.a.e.i.a:
    11:12:void <init>(java.lang.String) -> <init>
com.thealgorithms.datastructures.heaps.FibonacciHeap -> com.a.e.i.b:
    double GOLDEN_RATIO -> a
    com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode min -> b
    int totalLinks -> c
    int totalCuts -> d
    int numOfTrees -> e
    int numOfHeapNodes -> f
    int markedHeapNoodesCounter -> g
    9:19:void <init>() -> <init>
    9:31:void <init>(int) -> <init>
    38:38:boolean empty() -> a
    50:59:com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode insert(int) -> a
    69:100:void deleteMin() -> b
    107:107:com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode findMin() -> c
    117:128:void meld(com.thealgorithms.datastructures.heaps.FibonacciHeap) -> a
    135:135:int size() -> d
    143:156:int[] countersRep() -> e
    166:168:void delete(com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode) -> a
    177:189:void decreaseKey(com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode,int) -> a
    196:196:int potential() -> f
    205:205:int totalLinks() -> g
    213:213:int totalCuts() -> h
    221:224:void updateMin(com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode) -> b
    234:246:void cascadingCuts(com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode) -> c
    254:275:void cut(com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode) -> d
    281:283:void successiveLink(com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode) -> e
    289:306:com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode[] toBuckets(com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode) -> f
    313:330:com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode fromBuckets(com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode[]) -> a
    338:351:com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode link(com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode,com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode) -> a
    5:8:void <clinit>() -> <clinit>
com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode -> com.a.e.i.c:
    int key -> a
    int rank -> c
    boolean marked -> d
    com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode child -> e
    com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode next -> f
    com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode prev -> g
    com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode parent -> h
    com.thealgorithms.datastructures.heaps.FibonacciHeap this$0 -> b
    373:378:void <init>(com.thealgorithms.datastructures.heaps.FibonacciHeap,int) -> <init>
    384:384:int getKey() -> a
    392:392:boolean isMarked() -> b
    400:404:void mark() -> c
    411:416:void setNext(com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode) -> m
    422:422:com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode getNext() -> d
    430:430:boolean isRoot() -> e
    358:358:void access$000(com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode,com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode) -> a
    358:358:com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode access$100(com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode) -> a
    358:358:com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode access$202(com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode,com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode) -> b
    358:358:com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode access$300(com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode) -> b
    358:358:com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode access$400(com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode) -> c
    358:358:com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode access$302(com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode,com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode) -> c
    358:358:com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode access$402(com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode,com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode) -> d
    358:358:com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode access$500(com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode) -> d
    358:358:int access$600(com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode) -> e
    358:358:boolean access$700(com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode) -> f
    358:358:com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode access$200(com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode) -> g
    358:358:boolean access$800(com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode) -> h
    358:358:void access$900(com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode) -> i
    358:358:int access$610(com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode) -> j
    358:358:boolean access$1000(com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode) -> k
    358:358:boolean access$1002(com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode,boolean) -> a
    358:358:com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode access$102(com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode,com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode) -> e
    358:358:int access$608(com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode) -> l
com.thealgorithms.datastructures.heaps.GenericHeap -> com.a.e.i.d:
    java.util.ArrayList data -> a
    java.util.HashMap map -> b
    5:8:void <init>() -> <init>
    11:14:void add(java.lang.Comparable) -> a
    17:22:void upHeapify(int) -> a
    25:26:void display() -> a
    29:29:int size() -> b
    33:33:boolean isEmpty() -> c
    37:41:java.lang.Comparable remove() -> d
    45:64:void downHeapify(int) -> b
    67:67:java.lang.Comparable get() -> e
    72:72:int isLarger(java.lang.Comparable,java.lang.Comparable) -> a
    76:82:void swap(int,int) -> a
    85:88:void updatePriority(java.lang.Comparable) -> b
com.thealgorithms.datastructures.heaps.Heap -> com.a.e.i.e:
    com.thealgorithms.datastructures.heaps.HeapElement getElement() -> a
    void insertElement(com.thealgorithms.datastructures.heaps.HeapElement) -> a
    void deleteElement(int) -> a
com.thealgorithms.datastructures.heaps.HeapElement -> com.a.e.i.f:
    double key -> a
    java.lang.Object additionalInfo -> b
    26:29:void <init>(double,java.lang.Object) -> <init>
    36:39:void <init>(int,java.lang.Object) -> <init>
    46:49:void <init>(java.lang.Integer,java.lang.Object) -> <init>
    56:59:void <init>(java.lang.Double,java.lang.Object) -> <init>
    64:67:void <init>(double) -> <init>
    72:75:void <init>(int) -> <init>
    80:83:void <init>(java.lang.Integer) -> <init>
    88:91:void <init>(java.lang.Double) -> <init>
    98:98:java.lang.Object getInfo() -> a
    105:105:double getKey() -> b
    110:110:java.lang.String toString() -> toString
    120:130:boolean equals(java.lang.Object) -> equals
    135:141:int hashCode() -> hashCode
com.thealgorithms.datastructures.heaps.MaxHeap -> com.a.e.i.g:
    java.util.List maxHeap -> a
    16:28:void <init>(java.util.List) -> <init>
    38:41:com.thealgorithms.datastructures.heaps.HeapElement getElement(int) -> b
    46:50:double getElementKey(int) -> c
    55:58:void swap(int,int) -> a
    62:67:void toggleUp(int) -> d
    72:98:void toggleDown(int) -> e
    101:103:com.thealgorithms.datastructures.heaps.HeapElement extractMax() -> b
    108:110:void insertElement(com.thealgorithms.datastructures.heaps.HeapElement) -> a
    114:146:void deleteElement(int) -> a
    151:153:com.thealgorithms.datastructures.heaps.HeapElement getElement() -> a
com.thealgorithms.datastructures.heaps.MinHeap -> com.a.e.i.h:
    java.util.List minHeap -> a
    16:28:void <init>(java.util.List) -> <init>
    32:35:com.thealgorithms.datastructures.heaps.HeapElement getElement(int) -> b
    40:44:double getElementKey(int) -> c
    49:52:void swap(int,int) -> a
    56:61:void toggleUp(int) -> d
    66:92:void toggleDown(int) -> e
    95:97:com.thealgorithms.datastructures.heaps.HeapElement extractMin() -> b
    102:104:void insertElement(com.thealgorithms.datastructures.heaps.HeapElement) -> a
    108:140:void deleteElement(int) -> a
    145:147:com.thealgorithms.datastructures.heaps.HeapElement getElement() -> a
com.thealgorithms.datastructures.heaps.MinPriorityQueue -> com.a.e.i.i:
    int[] heap -> a
    int capacity -> b
    int size -> c
    22:26:void <init>(int) -> <init>
    31:45:void insert(int) -> a
    49:49:int peek() -> a
    54:57:boolean isEmpty() -> b
    62:65:boolean isFull() -> c
    70:74:void print() -> d
    80:83:void heapSort() -> e
    87:120:void sink() -> g
    124:129:int delete() -> f
    134:146:void main(java.lang.String[]) -> main
com.thealgorithms.datastructures.lists.CircleLinkedList -> com.a.e.j.a:
    int size -> a
    com.thealgorithms.datastructures.lists.CircleLinkedList$Node head -> b
    com.thealgorithms.datastructures.lists.CircleLinkedList$Node tail -> c
    19:29:void <init>() -> <init>
    33:33:int getSize() -> a
    39:54:void append(java.lang.Object) -> a
    58:67:java.lang.String toString() -> toString
    71:94:java.lang.Object remove(int) -> a
    98:109:void main(java.lang.String[]) -> main
com.thealgorithms.datastructures.lists.CircleLinkedList$1 -> com.a.e.j.a$1:
com.thealgorithms.datastructures.lists.CircleLinkedList$Node -> com.a.e.j.b:
    com.thealgorithms.datastructures.lists.CircleLinkedList$Node next -> a
    java.lang.Object value -> b
    10:13:void <init>(java.lang.Object,com.thealgorithms.datastructures.lists.CircleLinkedList$Node) -> <init>
    5:5:void <init>(java.lang.Object,com.thealgorithms.datastructures.lists.CircleLinkedList$Node,com.thealgorithms.datastructures.lists.CircleLinkedList$1) -> <init>
com.thealgorithms.datastructures.lists.CountSinglyLinkedListRecursion -> com.a.e.j.c:
    boolean $assertionsDisabled -> a
    3:3:void <init>() -> <init>
    6:11:void main(java.lang.String[]) -> main
    20:20:int countRecursion(com.thealgorithms.datastructures.lists.Node) -> c
    28:28:int count() -> a
    3:3:void <clinit>() -> <clinit>
com.thealgorithms.datastructures.lists.CreateAndDetectLoop -> com.a.e.j.d:
    5:5:void <init>() -> <init>
    13:19:void printList(com.thealgorithms.datastructures.lists.Node) -> a
    31:48:void createLoop(com.thealgorithms.datastructures.lists.Node,int) -> a
    62:73:boolean detectLoop(com.thealgorithms.datastructures.lists.Node) -> b
    77:103:void main(java.lang.String[]) -> main
com.thealgorithms.datastructures.lists.CursorLinkedList -> com.a.e.j.e:
    int os -> a
    int head -> b
    com.thealgorithms.datastructures.lists.CursorLinkedList$Node[] cursorSpace -> c
    int count -> d
    int CURSOR_SPACE_SIZE -> e
    35:46:void <init>() -> <init>
    49:57:void printList() -> a
    64:73:int indexOf(java.lang.Object) -> a
    83:97:java.lang.Object get(int) -> a
    101:105:void removeByIndex(int) -> b
    108:135:void remove(java.lang.Object) -> b
    138:143:void free(int) -> c
    146:163:void append(java.lang.Object) -> c
    170:184:int alloc() -> b
com.thealgorithms.datastructures.lists.CursorLinkedList$Node -> com.a.e.j.f:
    java.lang.Object element -> a
    int next -> b
    21:24:void <init>(java.lang.Object,int) -> <init>
com.thealgorithms.datastructures.lists.DoublyLinkedList -> com.a.e.j.g:
    com.thealgorithms.datastructures.lists.Link head -> a
    com.thealgorithms.datastructures.lists.Link tail -> b
    com.thealgorithms.datastructures.lists.LinkOperations linkOperations -> c
    int size -> d
    39:43:void <init>() -> <init>
    51:59:void <init>(int[]) -> <init>
    67:67:boolean isEmpty() -> a
    74:80:void display() -> b
    86:92:void displayBackwards() -> c
com.thealgorithms.datastructures.lists.Link -> com.a.e.j.h:
    int value -> a
    com.thealgorithms.datastructures.lists.Link next -> b
    com.thealgorithms.datastructures.lists.Link previous -> c
    120:122:void <init>(int) -> <init>
    128:129:void displayLink() -> a
    137:173:void main(java.lang.String[]) -> main
com.thealgorithms.datastructures.lists.LinkOperations -> com.a.e.j.i:
    com.thealgorithms.datastructures.lists.Link head -> a
    com.thealgorithms.datastructures.lists.Link tail -> b
    int size -> c
    179:179:void <init>() -> <init>
    201:210:void insertHead(int,com.thealgorithms.datastructures.lists.DoublyLinkedList) -> a
    218:229:void insertTail(int,com.thealgorithms.datastructures.lists.DoublyLinkedList) -> b
    242:266:void insertElementByIndex(int,int,com.thealgorithms.datastructures.lists.DoublyLinkedList) -> a
    274:283:com.thealgorithms.datastructures.lists.Link deleteHead() -> a
    292:301:com.thealgorithms.datastructures.lists.Link deleteTail() -> b
    311:332:void delete(int) -> a
    340:357:void insertOrdered(int,com.thealgorithms.datastructures.lists.DoublyLinkedList) -> c
    365:374:void deleteNode(com.thealgorithms.datastructures.lists.Link) -> a
    377:388:void removeDuplicates(com.thealgorithms.datastructures.lists.DoublyLinkedList) -> a
    395:414:void reverse() -> c
    420:423:void clearList() -> d
com.thealgorithms.datastructures.lists.MergeSortedArrayList -> com.a.e.j.j:
    9:9:void <init>() -> <init>
    12:30:void main(java.lang.String[]) -> main
    44:66:void merge(java.util.List,java.util.List,java.util.List) -> a
com.thealgorithms.datastructures.lists.MergeSortedSinglyLinkedList -> com.a.e.j.k:
    boolean $assertionsDisabled -> a
    3:3:void <init>() -> <init>
    6:18:void main(java.lang.String[]) -> main
    31:54:com.thealgorithms.datastructures.lists.SinglyLinkedList merge(com.thealgorithms.datastructures.lists.SinglyLinkedList,com.thealgorithms.datastructures.lists.SinglyLinkedList) -> a
    3:3:void <clinit>() -> <clinit>
com.thealgorithms.datastructures.lists.Merge_K_SortedLinkedlist -> com.a.e.j.l:
    10:10:void <init>() -> <init>
    21:45:com.thealgorithms.datastructures.lists.Merge_K_SortedLinkedlist$Node mergeKList(com.thealgorithms.datastructures.lists.Merge_K_SortedLinkedlist$Node[],int) -> a
    22:22:int lambda$mergeKList$0(com.thealgorithms.datastructures.lists.Merge_K_SortedLinkedlist$Node) -> a
com.thealgorithms.datastructures.lists.Merge_K_SortedLinkedlist$Node -> com.a.e.j.m:
    int data -> b
    com.thealgorithms.datastructures.lists.Merge_K_SortedLinkedlist$Node next -> c
    com.thealgorithms.datastructures.lists.Merge_K_SortedLinkedlist this$0 -> a
    53:56:void <init>(com.thealgorithms.datastructures.lists.Merge_K_SortedLinkedlist,int) -> <init>
    48:48:com.thealgorithms.datastructures.lists.Merge_K_SortedLinkedlist$Node access$000(com.thealgorithms.datastructures.lists.Merge_K_SortedLinkedlist$Node) -> a
    48:48:com.thealgorithms.datastructures.lists.Merge_K_SortedLinkedlist$Node access$002(com.thealgorithms.datastructures.lists.Merge_K_SortedLinkedlist$Node,com.thealgorithms.datastructures.lists.Merge_K_SortedLinkedlist$Node) -> a
    48:48:int access$100(com.thealgorithms.datastructures.lists.Merge_K_SortedLinkedlist$Node) -> b
com.thealgorithms.datastructures.lists.Node -> com.a.e.j.n:
    int value -> b
    com.thealgorithms.datastructures.lists.Node next -> c
    451:451:void <init>() -> <init>
    459:460:void <init>(int) -> <init>
    468:471:void <init>(int,com.thealgorithms.datastructures.lists.Node) -> <init>
com.thealgorithms.datastructures.lists.RandomNode -> com.a.e.j.o:
    java.util.List list -> a
    int size -> b
    java.util.Random rand -> c
    47:58:void <init>(com.thealgorithms.datastructures.lists.RandomNode$ListNode) -> <init>
    61:62:int getRandom() -> a
    67:76:void main(java.lang.String[]) -> main
    35:35:void <clinit>() -> <clinit>
com.thealgorithms.datastructures.lists.RandomNode$ListNode -> com.a.e.j.p:
    int val -> a
    com.thealgorithms.datastructures.lists.RandomNode$ListNode next -> b
    42:44:void <init>(int) -> <init>
com.thealgorithms.datastructures.lists.SearchSinglyLinkedListRecursion -> com.a.e.j.q:
    boolean $assertionsDisabled -> a
    3:3:void <init>() -> <init>
    6:15:void main(java.lang.String[]) -> main
    26:28:boolean searchRecursion(com.thealgorithms.datastructures.lists.Node,int) -> a
    34:34:boolean search(int) -> a
    3:3:void <clinit>() -> <clinit>
com.thealgorithms.datastructures.lists.SinglyLinkedList -> com.a.e.j.r:
    com.thealgorithms.datastructures.lists.Node head -> a
    int size -> e
    boolean $assertionsDisabled -> d
    23:26:void <init>() -> <init>
    34:37:void <init>(com.thealgorithms.datastructures.lists.Node,int) -> <init>
    45:54:boolean detectLoop() -> b
    62:101:void swapNodes(int,int) -> a
    108:120:com.thealgorithms.datastructures.lists.Node reverseList(com.thealgorithms.datastructures.lists.Node) -> a
    127:135:void clear() -> c
    143:143:boolean isEmpty() -> d
    152:152:int size() -> e
    161:161:com.thealgorithms.datastructures.lists.Node getHead() -> f
    169:170:void setHead(com.thealgorithms.datastructures.lists.Node) -> b
    178:184:int count() -> a
    195:202:boolean search(int) -> a
    207:213:java.lang.String toString() -> toString
    217:240:void deleteDuplicates() -> g
    243:252:void print() -> h
    260:261:void insertHead(int) -> b
    269:270:void insert(int) -> c
    279:302:void insertNth(int,int) -> b
    313:314:void deleteHead() -> i
    320:321:void delete() -> j
    327:346:void deleteNth(int) -> d
    355:360:int getNth(int) -> e
    371:374:void checkBounds(int,int,int) -> a
    380:432:void main(java.lang.String[]) -> main
    8:8:void <clinit>() -> <clinit>
com.thealgorithms.datastructures.lists.SkipList -> com.a.e.j.s:
    com.thealgorithms.datastructures.lists.SkipList$Node head -> a
    int height -> b
    com.thealgorithms.datastructures.lists.SkipList$HeightStrategy heightStrategy -> c
    int size -> d
    int DEFAULT_CAPACITY -> e
    54:55:void <init>() -> <init>
    57:62:void <init>(int,com.thealgorithms.datastructures.lists.SkipList$HeightStrategy) -> <init>
    65:91:void add(java.lang.Comparable) -> a
    94:100:java.lang.Comparable get(int) -> a
    104:125:void remove(java.lang.Comparable) -> b
    140:154:boolean contains(java.lang.Comparable) -> c
    158:158:int size() -> a
    175:212:java.lang.String toString() -> toString
    209:209:java.lang.String lambda$toString$1(int) -> b
    195:204:java.lang.String lambda$toString$0(boolean[]) -> a
com.thealgorithms.datastructures.lists.SkipList$BernoulliHeightStrategy -> com.a.e.j.t:
    double probability -> a
    double DEFAULT_PROBABILITY -> b
    java.util.Random RANDOM -> c
    295:297:void <init>() -> <init>
    299:306:void <init>(double) -> <init>
    310:316:int height(int) -> a
    321:329:int nodeHeight(int) -> b
    293:293:void <clinit>() -> <clinit>
com.thealgorithms.datastructures.lists.SkipList$HeightStrategy -> com.a.e.j.u:
    int height(int) -> a
    int nodeHeight(int) -> b
com.thealgorithms.datastructures.lists.SkipList$Node -> com.a.e.j.v:
    java.lang.Object value -> a
    int height -> b
    java.util.List forward -> c
    java.util.List backward -> d
    229:236:void <init>(java.lang.Object,int) -> <init>
    239:240:com.thealgorithms.datastructures.lists.SkipList$Node next(int) -> a
    244:245:void setNext(int,com.thealgorithms.datastructures.lists.SkipList$Node) -> a
    248:249:void setPrevious(int,com.thealgorithms.datastructures.lists.SkipList$Node) -> b
    252:253:com.thealgorithms.datastructures.lists.SkipList$Node previous(int) -> b
    257:257:java.lang.Object getValue() -> a
    261:264:void checkLayer(int) -> c
    221:221:java.lang.Object access$000(com.thealgorithms.datastructures.lists.SkipList$Node) -> a
    221:221:int access$100(com.thealgorithms.datastructures.lists.SkipList$Node) -> b
com.thealgorithms.datastructures.queues.CircularQueue -> com.a.e.k.a:
    int[] arr -> a
    int topOfQueue -> b
    int beginningOfQueue -> c
    int size -> d
    12:17:void <init>(int) -> <init>
    20:23:boolean isEmpty() -> a
    28:33:boolean isFull() -> b
    38:54:void enQueue(int) -> a
    57:70:int deQueue() -> c
    75:79:int peek() -> d
    84:86:void deleteQueue() -> e
    89:111:void main(java.lang.String[]) -> main
com.thealgorithms.datastructures.queues.Deques -> com.a.e.k.b:
    com.thealgorithms.datastructures.queues.Deques$DequeNode head -> a
    com.thealgorithms.datastructures.queues.Deques$DequeNode tail -> b
    int size -> c
    12:55:void <init>() -> <init>
    64:79:void addFirst(java.lang.Object) -> a
    88:103:void addLast(java.lang.Object) -> b
    112:137:java.lang.Object pollFirst() -> a
    147:171:java.lang.Object pollLast() -> b
    180:180:java.lang.Object peekFirst() -> c
    189:189:java.lang.Object peekLast() -> d
    198:198:int size() -> e
    207:207:boolean isEmpty() -> f
    220:234:java.lang.String toString() -> toString
    238:272:void main(java.lang.String[]) -> main
com.thealgorithms.datastructures.queues.Deques$DequeNode -> com.a.e.k.c:
    java.lang.Object val -> a
    com.thealgorithms.datastructures.queues.Deques$DequeNode next -> b
    com.thealgorithms.datastructures.queues.Deques$DequeNode prev -> c
    com.thealgorithms.datastructures.queues.Deques this$0 -> d
    27:39:void <init>(com.thealgorithms.datastructures.queues.Deques,java.lang.Object) -> <init>
com.thealgorithms.datastructures.queues.GenericArrayListQueue -> com.a.e.k.d:
    java.util.ArrayList _queue -> a
    boolean $assertionsDisabled -> b
    13:18:void <init>() -> <init>
    26:26:boolean hasElements() -> c
    36:40:java.lang.Object peek() -> a
    50:50:boolean add(java.lang.Object) -> a
    59:63:java.lang.Object pull() -> b
    72:86:void main(java.lang.String[]) -> main
    13:13:void <clinit>() -> <clinit>
com.thealgorithms.datastructures.queues.LinkedQueue -> com.a.e.k.e:
    com.thealgorithms.datastructures.queues.LinkedQueue$Node front -> b
    com.thealgorithms.datastructures.queues.LinkedQueue$Node rear -> c
    int size -> d
    boolean $assertionsDisabled -> a
    44:46:void <init>() -> <init>
    54:54:boolean isEmpty() -> a
    64:69:boolean enqueue(int) -> a
    78:92:int dequeue() -> b
    101:104:int peekFront() -> c
    113:116:int peekRear() -> d
    125:125:int size() -> e
    132:135:void clear() -> f
    139:150:java.lang.String toString() -> toString
    155:177:void main(java.lang.String[]) -> main
    5:5:void <clinit>() -> <clinit>
com.thealgorithms.datastructures.queues.LinkedQueue$Node -> com.a.e.k.f:
    int data -> a
    com.thealgorithms.datastructures.queues.LinkedQueue$Node next -> b
    com.thealgorithms.datastructures.queues.LinkedQueue this$0 -> c
    13:14:void <init>(com.thealgorithms.datastructures.queues.LinkedQueue) -> <init>
    17:18:void <init>(com.thealgorithms.datastructures.queues.LinkedQueue,int) -> <init>
    20:23:void <init>(com.thealgorithms.datastructures.queues.LinkedQueue,int,com.thealgorithms.datastructures.queues.LinkedQueue$Node) -> <init>
com.thealgorithms.datastructures.queues.PriorityQueue -> com.a.e.k.g:
    int maxSize -> a
    int[] queueArray -> b
    int nItems -> c
    32:36:void <init>(int) -> <init>
    44:55:void insert(int) -> a
    63:63:int remove() -> a
    72:72:int peek() -> b
    81:81:boolean isEmpty() -> c
    90:90:boolean isFull() -> d
    99:99:int getSize() -> e
com.thealgorithms.datastructures.queues.PriorityQueues -> com.a.e.k.h:
    108:108:void <init>() -> <init>
    116:127:void main(java.lang.String[]) -> main
com.thealgorithms.datastructures.queues.Queue -> com.a.e.k.i:
    int DEFAULT_CAPACITY -> a
    int maxSize -> b
    int[] queueArray -> c
    int front -> d
    int rear -> e
    int nItems -> f
    42:43:void <init>() -> <init>
    50:56:void <init>(int) -> <init>
    65:72:boolean insert(int) -> a
    81:87:int remove() -> a
    96:96:int peekFront() -> b
    105:105:int peekRear() -> c
    114:114:boolean isEmpty() -> d
    123:123:boolean isFull() -> e
    132:132:int getSize() -> f
    137:146:java.lang.String toString() -> toString
com.thealgorithms.datastructures.queues.Queues -> com.a.e.k.j:
    155:155:void <init>() -> <init>
    163:181:void main(java.lang.String[]) -> main
com.thealgorithms.datastructures.stacks.BalancedBrackets -> com.a.e.l.a:
    boolean $assertionsDisabled -> a
    19:19:void <init>() -> <init>
    30:44:boolean isPaired(char,char) -> a
    55:81:boolean isBalanced(java.lang.String) -> a
    85:87:void main(java.lang.String[]) -> main
    19:19:void <clinit>() -> <clinit>
com.thealgorithms.datastructures.stacks.CalculateMaxOfMin -> com.a.e.l.b:
    10:10:void <init>() -> <init>
    13:32:int calculateMaxOfMin(int[]) -> a
com.thealgorithms.datastructures.stacks.DecimalToAnyUsingStack -> com.a.e.l.c:
    boolean $assertionsDisabled -> a
    5:5:void <init>() -> <init>
    8:13:void main(java.lang.String[]) -> main
    25:62:java.lang.String convert(int,int) -> a
    5:5:void <clinit>() -> <clinit>
com.thealgorithms.datastructures.stacks.DuplicateBrackets -> com.a.e.l.d:
    12:12:void <init>() -> <init>
    15:33:boolean check(java.lang.String) -> a
    37:41:void main(java.lang.String[]) -> main
com.thealgorithms.datastructures.stacks.InfixToPostfix -> com.a.e.l.e:
    boolean $assertionsDisabled -> a
    5:5:void <init>() -> <init>
    8:11:void main(java.lang.String[]) -> main
    15:43:java.lang.String infix2PostFix(java.lang.String) -> a
    47:57:int precedence(char) -> a
    5:5:void <clinit>() -> <clinit>
com.thealgorithms.datastructures.stacks.LargestRectangle -> com.a.e.l.f:
    boolean $assertionsDisabled -> a
    10:10:void <init>() -> <init>
    13:28:java.lang.String largestRectanglehistogram(int[]) -> a
    32:35:void main(java.lang.String[]) -> main
    10:10:void <clinit>() -> <clinit>
com.thealgorithms.datastructures.stacks.LinkedListStack -> com.a.e.l.g:
    com.thealgorithms.datastructures.stacks.Node head -> a
    int size -> b
    65:68:void <init>() -> <init>
    77:81:boolean push(int) -> a
    91:99:int pop() -> a
    109:112:int peek() -> b
    117:125:java.lang.String toString() -> toString
    134:134:boolean isEmpty() -> c
    143:143:int getSize() -> d
com.thealgorithms.datastructures.stacks.MaximumMinimumWindow -> com.a.e.l.h:
    boolean $assertionsDisabled -> a
    30:30:void <init>() -> <init>
    41:96:int[] calculateMaxOfMin(int[],int) -> a
    100:104:void main(java.lang.String[]) -> main
    30:30:void <clinit>() -> <clinit>
com.thealgorithms.datastructures.stacks.NextGraterElement -> com.a.e.l.i:
    43:43:void <init>() -> <init>
    46:60:int[] findNextGreaterElements(int[]) -> a
    64:67:void main(java.lang.String[]) -> main
com.thealgorithms.datastructures.stacks.NextSmallerElement -> com.a.e.l.j:
    40:40:void <init>() -> <init>
    44:60:int[] findNextSmallerElements(int[]) -> a
    64:67:void main(java.lang.String[]) -> main
com.thealgorithms.datastructures.stacks.Node -> com.a.e.l.k:
    int data -> a
    com.thealgorithms.datastructures.stacks.Node next -> b
    38:41:void <init>(int) -> <init>
com.thealgorithms.datastructures.stacks.NodeStack -> com.a.e.l.l:
    java.lang.Object data -> a
    com.thealgorithms.datastructures.stacks.NodeStack head -> b
    com.thealgorithms.datastructures.stacks.NodeStack next -> c
    com.thealgorithms.datastructures.stacks.NodeStack previous -> d
    int size -> e
    14:32:void main(java.lang.String[]) -> main
    53:53:void <init>() -> <init>
    55:57:void <init>(java.lang.Object) -> <init>
    65:78:void push(java.lang.Object) -> a
    86:93:java.lang.Object pop() -> a
    102:102:java.lang.Object peek() -> b
    111:111:boolean isEmpty() -> c
    120:120:int size() -> d
    130:133:void print() -> e
    139:139:com.thealgorithms.datastructures.stacks.NodeStack getHead() -> f
    143:144:void setHead(com.thealgorithms.datastructures.stacks.NodeStack) -> a
    147:147:com.thealgorithms.datastructures.stacks.NodeStack getNext() -> g
    151:152:void setNext(com.thealgorithms.datastructures.stacks.NodeStack) -> b
    155:155:com.thealgorithms.datastructures.stacks.NodeStack getPrevious() -> h
    159:160:void setPrevious(com.thealgorithms.datastructures.stacks.NodeStack) -> c
    163:163:int getSize() -> i
    167:168:void setSize(int) -> a
    171:171:java.lang.Object getData() -> j
    175:176:void setData(java.lang.Object) -> b
    48:48:void <clinit>() -> <clinit>
com.thealgorithms.datastructures.stacks.PostfixToInfix -> com.a.e.l.m:
    boolean $assertionsDisabled -> a
    19:19:void <init>() -> <init>
    22:31:boolean isOperator(char) -> a
    36:74:boolean isValidPostfixExpression(java.lang.String) -> a
    78:118:java.lang.String getPostfixToInfix(java.lang.String) -> b
    122:128:void main(java.lang.String[]) -> main
    19:19:void <clinit>() -> <clinit>
com.thealgorithms.datastructures.stacks.ReverseStack -> com.a.e.l.n:
    11:11:void <init>() -> <init>
    14:32:void main(java.lang.String[]) -> main
    35:49:void reverseStack(java.util.Stack) -> a
    52:66:void insertAtBottom(java.util.Stack,int) -> a
com.thealgorithms.datastructures.stacks.StackArray -> com.a.e.l.o:
    int DEFAULT_CAPACITY -> b
    int maxSize -> c
    int[] stackArray -> d
    int top -> e
    boolean $assertionsDisabled -> a
    20:37:void main(java.lang.String[]) -> main
    63:64:void <init>() -> <init>
    71:75:void <init>(int) -> <init>
    83:90:void push(int) -> a
    98:107:int pop() -> a
    117:121:int peek() -> b
    126:134:void resize(int) -> b
    142:142:boolean isEmpty() -> c
    151:151:boolean isFull() -> d
    162:163:void makeEmpty() -> e
    171:171:int size() -> f
    13:13:void <clinit>() -> <clinit>
com.thealgorithms.datastructures.stacks.StackArrayList -> com.a.e.l.p:
    java.util.ArrayList stack -> b
    boolean $assertionsDisabled -> a
    23:48:void main(java.lang.String[]) -> main
    58:60:void <init>() -> <init>
    68:69:void push(int) -> a
    78:83:int pop() -> a
    92:92:boolean isEmpty() -> b
    102:105:int peek() -> c
    114:114:int size() -> d
    17:17:void <clinit>() -> <clinit>
com.thealgorithms.datastructures.stacks.StackOfLinkedList -> com.a.e.l.q:
    boolean $assertionsDisabled -> a
    9:9:void <init>() -> <init>
    12:29:void main(java.lang.String[]) -> main
    9:9:void <clinit>() -> <clinit>
com.thealgorithms.datastructures.trees.AVLSimple -> com.a.e.m.a:
    com.thealgorithms.datastructures.trees.AVLSimple$Node root -> a
    29:29:void <init>() -> <init>
    47:48:void insert(int) -> a
    51:78:com.thealgorithms.datastructures.trees.AVLSimple$Node insert(com.thealgorithms.datastructures.trees.AVLSimple$Node,int) -> a
    82:84:void display() -> a
    87:96:void display(com.thealgorithms.datastructures.trees.AVLSimple$Node) -> a
    99:102:int height(com.thealgorithms.datastructures.trees.AVLSimple$Node) -> b
    106:107:int bf(com.thealgorithms.datastructures.trees.AVLSimple$Node) -> c
    111:118:com.thealgorithms.datastructures.trees.AVLSimple$Node rightRotate(com.thealgorithms.datastructures.trees.AVLSimple$Node) -> d
    122:129:com.thealgorithms.datastructures.trees.AVLSimple$Node leftRotate(com.thealgorithms.datastructures.trees.AVLSimple$Node) -> e
com.thealgorithms.datastructures.trees.AVLSimple$Node -> com.a.e.m.b:
    int data -> a
    int height -> b
    com.thealgorithms.datastructures.trees.AVLSimple$Node left -> c
    com.thealgorithms.datastructures.trees.AVLSimple$Node right -> d
    com.thealgorithms.datastructures.trees.AVLSimple this$0 -> e
    38:41:void <init>(com.thealgorithms.datastructures.trees.AVLSimple,int) -> <init>
com.thealgorithms.datastructures.trees.AVLTree -> com.a.e.m.c:
    com.thealgorithms.datastructures.trees.AVLTree$Node root -> a
    3:3:void <init>() -> <init>
    21:47:boolean insert(int) -> a
    51:80:void delete(com.thealgorithms.datastructures.trees.AVLTree$Node) -> a
    83:97:void delete(int) -> b
    100:121:void rebalance(com.thealgorithms.datastructures.trees.AVLTree$Node) -> b
    124:146:com.thealgorithms.datastructures.trees.AVLTree$Node rotateLeft(com.thealgorithms.datastructures.trees.AVLTree$Node) -> c
    150:172:com.thealgorithms.datastructures.trees.AVLTree$Node rotateRight(com.thealgorithms.datastructures.trees.AVLTree$Node) -> d
    176:177:com.thealgorithms.datastructures.trees.AVLTree$Node rotateLeftThenRight(com.thealgorithms.datastructures.trees.AVLTree$Node) -> e
    181:182:com.thealgorithms.datastructures.trees.AVLTree$Node rotateRightThenLeft(com.thealgorithms.datastructures.trees.AVLTree$Node) -> f
    186:189:int height(com.thealgorithms.datastructures.trees.AVLTree$Node) -> g
    193:197:void setBalance(com.thealgorithms.datastructures.trees.AVLTree$Node[]) -> a
    200:201:void printBalance() -> a
    204:209:void printBalance(com.thealgorithms.datastructures.trees.AVLTree$Node) -> h
    212:215:void reheight(com.thealgorithms.datastructures.trees.AVLTree$Node) -> i
    218:223:boolean search(int) -> c
    228:238:com.thealgorithms.datastructures.trees.AVLTree$Node searchHelper(com.thealgorithms.datastructures.trees.AVLTree$Node,int) -> a
    242:251:void main(java.lang.String[]) -> main
com.thealgorithms.datastructures.trees.AVLTree$Node -> com.a.e.m.d:
    int key -> b
    int balance -> c
    int height -> d
    com.thealgorithms.datastructures.trees.AVLTree$Node left -> e
    com.thealgorithms.datastructures.trees.AVLTree$Node right -> f
    com.thealgorithms.datastructures.trees.AVLTree$Node parent -> g
    com.thealgorithms.datastructures.trees.AVLTree this$0 -> a
    14:17:void <init>(com.thealgorithms.datastructures.trees.AVLTree,int,com.thealgorithms.datastructures.trees.AVLTree$Node) -> <init>
    7:7:int access$000(com.thealgorithms.datastructures.trees.AVLTree$Node) -> a
    7:7:com.thealgorithms.datastructures.trees.AVLTree$Node access$100(com.thealgorithms.datastructures.trees.AVLTree$Node) -> b
    7:7:com.thealgorithms.datastructures.trees.AVLTree$Node access$200(com.thealgorithms.datastructures.trees.AVLTree$Node) -> c
    7:7:com.thealgorithms.datastructures.trees.AVLTree$Node access$102(com.thealgorithms.datastructures.trees.AVLTree$Node,com.thealgorithms.datastructures.trees.AVLTree$Node) -> a
    7:7:com.thealgorithms.datastructures.trees.AVLTree$Node access$202(com.thealgorithms.datastructures.trees.AVLTree$Node,com.thealgorithms.datastructures.trees.AVLTree$Node) -> b
    7:7:com.thealgorithms.datastructures.trees.AVLTree$Node access$300(com.thealgorithms.datastructures.trees.AVLTree$Node) -> d
    7:7:int access$002(com.thealgorithms.datastructures.trees.AVLTree$Node,int) -> a
    7:7:int access$400(com.thealgorithms.datastructures.trees.AVLTree$Node) -> e
    7:7:com.thealgorithms.datastructures.trees.AVLTree$Node access$302(com.thealgorithms.datastructures.trees.AVLTree$Node,com.thealgorithms.datastructures.trees.AVLTree$Node) -> c
    7:7:int access$500(com.thealgorithms.datastructures.trees.AVLTree$Node) -> f
    7:7:int access$402(com.thealgorithms.datastructures.trees.AVLTree$Node,int) -> b
    7:7:int access$502(com.thealgorithms.datastructures.trees.AVLTree$Node,int) -> c
com.thealgorithms.datastructures.trees.BSTIterative -> com.a.e.m.e:
    com.thealgorithms.datastructures.trees.BSTIterative$Node root -> b
    boolean $assertionsDisabled -> a
    28:30:void <init>() -> <init>
    36:56:void main(java.lang.String[]) -> main
    65:105:void add(int) -> a
    113:185:void remove(int) -> b
    191:208:void inorder() -> a
    214:240:void postorder() -> b
    246:265:void preorder() -> c
    274:290:boolean find(int) -> c
    18:18:void <clinit>() -> <clinit>
com.thealgorithms.datastructures.trees.BSTIterative$Node -> com.a.e.m.f:
    int data -> a
    com.thealgorithms.datastructures.trees.BSTIterative$Node left -> b
    com.thealgorithms.datastructures.trees.BSTIterative$Node right -> c
    305:309:void <init>(int) -> <init>
com.thealgorithms.datastructures.trees.BSTRecursive -> com.a.e.m.g:
    com.thealgorithms.datastructures.trees.BSTRecursive$Node root -> b
    boolean $assertionsDisabled -> a
    30:32:void <init>() -> <init>
    38:58:void main(java.lang.String[]) -> main
    68:95:com.thealgorithms.datastructures.trees.BSTRecursive$Node delete(com.thealgorithms.datastructures.trees.BSTRecursive$Node,int) -> a
    107:114:com.thealgorithms.datastructures.trees.BSTRecursive$Node insert(com.thealgorithms.datastructures.trees.BSTRecursive$Node,int) -> b
    123:133:void preOrder(com.thealgorithms.datastructures.trees.BSTRecursive$Node) -> a
    141:151:void postOrder(com.thealgorithms.datastructures.trees.BSTRecursive$Node) -> b
    159:169:void inOrder(com.thealgorithms.datastructures.trees.BSTRecursive$Node) -> c
    179:186:boolean search(com.thealgorithms.datastructures.trees.BSTRecursive$Node,int) -> c
    197:198:void add(int) -> a
    206:207:void remove(int) -> b
    213:216:void inorder() -> a
    222:225:void postorder() -> b
    231:234:void preorder() -> c
    242:247:boolean find(int) -> c
    20:20:void <clinit>() -> <clinit>
com.thealgorithms.datastructures.trees.BSTRecursive$Node -> com.a.e.m.h:
    int data -> a
    com.thealgorithms.datastructures.trees.BSTRecursive$Node left -> b
    com.thealgorithms.datastructures.trees.BSTRecursive$Node right -> c
    262:266:void <init>(int) -> <init>
com.thealgorithms.datastructures.trees.BSTRecursiveGeneric -> com.a.e.m.i:
    com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node root -> b
    boolean $assertionsDisabled -> a
    27:29:void <init>() -> <init>
    35:82:void main(java.lang.String[]) -> main
    92:119:com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node delete(com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node,java.lang.Comparable) -> a
    131:138:com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node insert(com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node,java.lang.Comparable) -> b
    147:157:void preOrder(com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node) -> a
    165:175:void postOrder(com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node) -> b
    183:193:void inOrder(com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node) -> c
    203:213:void inOrderSort(com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node,java.util.List) -> a
    223:230:boolean search(com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node,java.lang.Comparable) -> c
    241:242:void add(java.lang.Comparable) -> a
    250:251:void remove(java.lang.Comparable) -> b
    257:260:void inorder() -> a
    267:269:java.util.List inorderSort() -> b
    276:279:void postorder() -> c
    285:288:void preorder() -> d
    296:301:boolean find(java.lang.Comparable) -> c
    17:17:void <clinit>() -> <clinit>
com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node -> com.a.e.m.j:
    java.lang.Object data -> a
    com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node left -> b
    com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node right -> c
    316:320:void <init>(java.lang.Object) -> <init>
com.thealgorithms.datastructures.trees.BinaryTree -> com.a.e.m.k:
    com.thealgorithms.datastructures.trees.BinaryTree$Node root -> a
    66:68:void <init>() -> <init>
    73:75:void <init>(com.thealgorithms.datastructures.trees.BinaryTree$Node) -> <init>
    84:100:com.thealgorithms.datastructures.trees.BinaryTree$Node find(int) -> a
    109:127:void put(int) -> b
    137:226:boolean remove(int) -> c
    239:248:com.thealgorithms.datastructures.trees.BinaryTree$Node findSuccessor(com.thealgorithms.datastructures.trees.BinaryTree$Node) -> a
    257:257:com.thealgorithms.datastructures.trees.BinaryTree$Node getRoot() -> a
    267:272:void inOrder(com.thealgorithms.datastructures.trees.BinaryTree$Node) -> b
    280:285:void preOrder(com.thealgorithms.datastructures.trees.BinaryTree$Node) -> c
    293:298:void postOrder(com.thealgorithms.datastructures.trees.BinaryTree$Node) -> d
    309:333:void bfs(com.thealgorithms.datastructures.trees.BinaryTree$Node) -> e
com.thealgorithms.datastructures.trees.BinaryTree$Node -> com.a.e.m.l:
    int data -> a
    com.thealgorithms.datastructures.trees.BinaryTree$Node left -> b
    com.thealgorithms.datastructures.trees.BinaryTree$Node right -> c
    com.thealgorithms.datastructures.trees.BinaryTree$Node parent -> d
    50:55:void <init>(int) -> <init>
com.thealgorithms.datastructures.trees.CeilInBinarySearchTree -> com.a.e.m.m:
    45:45:void <init>() -> <init>
    48:68:com.thealgorithms.datastructures.trees.BinaryTree$Node getCeil(com.thealgorithms.datastructures.trees.BinaryTree$Node,int) -> a
com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced -> com.a.e.m.n:
    17:17:void <init>() -> <init>
    66:71:boolean isBalancedRecursive(com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced$BinaryTree) -> a
    91:111:int isBalancedRecursive(com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced$BTNode,int,boolean[]) -> a
    119:197:boolean isBalancedIterative(com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced$BinaryTree) -> b
    205:225:com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced$BinaryTree buildUnbalancedTree() -> a
    233:252:com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced$BinaryTree buildBalancedTree() -> b
    260:277:void main(java.lang.String[]) -> main
com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced$BTNode -> com.a.e.m.o:
    int value -> a
    com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced$BTNode left -> b
    com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced$BTNode right -> c
    com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced this$0 -> d
    43:55:void <init>(com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced,int) -> <init>
com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced$BinaryTree -> com.a.e.m.p:
    com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced$BTNode root -> a
    com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced this$0 -> b
    22:27:void <init>(com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced) -> <init>
com.thealgorithms.datastructures.trees.CreateBSTFromSortedArray -> com.a.e.m.q:
    12:12:void <init>() -> <init>
    15:19:void main(java.lang.String[]) -> main
    22:29:void test(int[]) -> a
    33:42:com.thealgorithms.datastructures.trees.BinaryTree$Node createBst(int[],int,int) -> a
com.thealgorithms.datastructures.trees.CreateBinaryTreeFromInorderPreorder -> com.a.e.m.r:
    21:21:void <init>() -> <init>
    24:32:void main(java.lang.String[]) -> main
    38:66:void test(java.lang.Integer[],java.lang.Integer[]) -> a
    75:102:com.thealgorithms.datastructures.trees.BinaryTree$Node createTree(java.lang.Integer[],java.lang.Integer[],int,int,int) -> a
    113:139:com.thealgorithms.datastructures.trees.BinaryTree$Node createTreeOptimized(java.lang.Integer[],java.lang.Integer[],int,int,int,java.util.Map) -> a
com.thealgorithms.datastructures.trees.FenwickTree -> com.a.e.m.s:
    int n -> a
    int[] fen_t -> b
    9:12:void <init>(int) -> <init>
    17:22:void update(int,int) -> a
    27:33:int query(int) -> a
com.thealgorithms.datastructures.trees.GenericTree -> com.a.e.m.t:
    com.thealgorithms.datastructures.trees.GenericTree$Node root -> a
    int size -> b
    28:31:void <init>() -> <init>
    35:52:com.thealgorithms.datastructures.trees.GenericTree$Node create_treeG(com.thealgorithms.datastructures.trees.GenericTree$Node,int,java.util.Scanner) -> a
    59:60:void display() -> a
    63:71:void display_1(com.thealgorithms.datastructures.trees.GenericTree$Node) -> b
    80:80:int size2call() -> b
    84:88:int size2(com.thealgorithms.datastructures.trees.GenericTree$Node) -> a
    97:98:int maxcall() -> c
    102:109:int max(com.thealgorithms.datastructures.trees.GenericTree$Node,int) -> b
    118:118:int heightcall() -> d
    122:129:int height(com.thealgorithms.datastructures.trees.GenericTree$Node) -> c
    139:139:boolean findcall(int) -> a
    143:151:boolean find(com.thealgorithms.datastructures.trees.GenericTree$Node,int) -> c
    160:161:void depthcaller(int) -> b
    164:171:void depth(com.thealgorithms.datastructures.trees.GenericTree$Node,int) -> a
    178:180:void preordercall() -> e
    183:187:void preorder(com.thealgorithms.datastructures.trees.GenericTree$Node) -> d
    193:195:void postordercall() -> f
    198:202:void postorder(com.thealgorithms.datastructures.trees.GenericTree$Node) -> e
    208:220:void levelorder() -> g
    226:227:void removeleavescall() -> h
    230:243:void removeleaves(com.thealgorithms.datastructures.trees.GenericTree$Node) -> f
com.thealgorithms.datastructures.trees.GenericTree$1 -> com.a.e.m.t$1:
com.thealgorithms.datastructures.trees.GenericTree$Node -> com.a.e.m.u:
    int data -> a
    java.util.ArrayList child -> b
    com.thealgorithms.datastructures.trees.GenericTree this$0 -> c
    19:22:void <init>(com.thealgorithms.datastructures.trees.GenericTree) -> <init>
    19:19:void <init>(com.thealgorithms.datastructures.trees.GenericTree,com.thealgorithms.datastructures.trees.GenericTree$1) -> <init>
com.thealgorithms.datastructures.trees.LCA -> com.a.e.m.v:
    java.util.Scanner scanner -> a
    6:6:void <init>() -> <init>
    12:45:void main(java.lang.String[]) -> main
    63:70:void dfs(java.util.ArrayList,int,int,int[],int[]) -> a
    82:97:int getLCA(int,int,int[],int[]) -> a
    8:8:void <clinit>() -> <clinit>
com.thealgorithms.datastructures.trees.LazySegmentTree -> com.a.e.m.w:
    com.thealgorithms.datastructures.trees.LazySegmentTree$Node root -> a
    85:87:void <init>(int[]) -> <init>
    97:101:com.thealgorithms.datastructures.trees.LazySegmentTree$Node buildTree(int[],int,int) -> a
    112:122:void updateRange(int,int,int,com.thealgorithms.datastructures.trees.LazySegmentTree$Node) -> a
    131:136:com.thealgorithms.datastructures.trees.LazySegmentTree$Node getRange(int,int,com.thealgorithms.datastructures.trees.LazySegmentTree$Node) -> a
    141:142:int getRange(int,int) -> a
    146:147:void updateRange(int,int,int) -> a
    150:150:com.thealgorithms.datastructures.trees.LazySegmentTree$Node getRoot() -> a
com.thealgorithms.datastructures.trees.LazySegmentTree$Node -> com.a.e.m.x:
    int start -> c
    int end -> d
    int value -> e
    int lazy -> f
    com.thealgorithms.datastructures.trees.LazySegmentTree$Node left -> a
    com.thealgorithms.datastructures.trees.LazySegmentTree$Node right -> b
    18:25:void <init>(int,int,int) -> <init>
    32:34:void applyUpdate(int) -> a
    39:45:void shift() -> a
    54:63:com.thealgorithms.datastructures.trees.LazySegmentTree$Node merge(com.thealgorithms.datastructures.trees.LazySegmentTree$Node,com.thealgorithms.datastructures.trees.LazySegmentTree$Node) -> a
    67:67:int getValue() -> b
    71:71:com.thealgorithms.datastructures.trees.LazySegmentTree$Node getLeft() -> c
    75:75:com.thealgorithms.datastructures.trees.LazySegmentTree$Node getRight() -> d
    11:11:int access$000(com.thealgorithms.datastructures.trees.LazySegmentTree$Node) -> a
    11:11:int access$100(com.thealgorithms.datastructures.trees.LazySegmentTree$Node) -> b
    11:11:int access$202(com.thealgorithms.datastructures.trees.LazySegmentTree$Node,int) -> a
    11:11:int access$200(com.thealgorithms.datastructures.trees.LazySegmentTree$Node) -> c
com.thealgorithms.datastructures.trees.LevelOrderTraversal -> com.a.e.m.y:
    com.thealgorithms.datastructures.trees.LevelOrderTraversal$Node root -> a
    19:21:void <init>(com.thealgorithms.datastructures.trees.LevelOrderTraversal$Node) -> <init>
    25:30:void printLevelOrder() -> a
    36:42:int height(com.thealgorithms.datastructures.trees.LevelOrderTraversal$Node) -> a
    48:57:void printGivenLevel(com.thealgorithms.datastructures.trees.LevelOrderTraversal$Node,int) -> a
com.thealgorithms.datastructures.trees.LevelOrderTraversal$Node -> com.a.e.m.z:
    int data -> a
    com.thealgorithms.datastructures.trees.LevelOrderTraversal$Node left -> b
    com.thealgorithms.datastructures.trees.LevelOrderTraversal$Node right -> c
    com.thealgorithms.datastructures.trees.LevelOrderTraversal this$0 -> d
    10:13:void <init>(com.thealgorithms.datastructures.trees.LevelOrderTraversal,int) -> <init>
com.thealgorithms.datastructures.trees.LevelOrderTraversalQueue -> com.a.e.m.A:
    7:7:void <init>() -> <init>
    25:44:void printLevelOrder(com.thealgorithms.datastructures.trees.LevelOrderTraversalQueue$Node) -> a
com.thealgorithms.datastructures.trees.LevelOrderTraversalQueue$Node -> com.a.e.m.B:
    int data -> a
    com.thealgorithms.datastructures.trees.LevelOrderTraversalQueue$Node left -> b
    com.thealgorithms.datastructures.trees.LevelOrderTraversalQueue$Node right -> c
    com.thealgorithms.datastructures.trees.LevelOrderTraversalQueue this$0 -> d
    15:19:void <init>(com.thealgorithms.datastructures.trees.LevelOrderTraversalQueue,int) -> <init>
com.thealgorithms.datastructures.trees.Main -> com.a.e.m.C:
    6:6:void <init>() -> <init>
    9:15:void main(java.lang.String[]) -> main
    18:26:com.thealgorithms.datastructures.trees.NRKTree BuildTree() -> a
    31:43:int nearestRightKey(com.thealgorithms.datastructures.trees.NRKTree,int) -> a
com.thealgorithms.datastructures.trees.NRKTree -> com.a.e.m.D:
    com.thealgorithms.datastructures.trees.NRKTree left -> a
    com.thealgorithms.datastructures.trees.NRKTree right -> b
    int data -> c
    55:59:void <init>(int) -> <init>
    61:65:void <init>(com.thealgorithms.datastructures.trees.NRKTree,com.thealgorithms.datastructures.trees.NRKTree,int) -> <init>
    68:78:com.thealgorithms.datastructures.trees.NRKTree insertKey(com.thealgorithms.datastructures.trees.NRKTree,int) -> a
com.thealgorithms.datastructures.trees.Node -> com.a.e.m.E:
    com.thealgorithms.datastructures.trees.Node left -> a
    com.thealgorithms.datastructures.trees.Node right -> b
    int data -> c
    51:53:void <init>(int) -> <init>
    56:69:void insert(int) -> a
    72:79:void printInOrder() -> a
    82:89:void printPreOrder() -> b
    92:99:void printPostOrder() -> c
    106:119:void printLevelOrder() -> d
com.thealgorithms.datastructures.trees.PrintTopViewofTree -> com.a.e.m.F:
    90:90:void <init>() -> <init>
    103:112:void main(java.lang.String[]) -> main
com.thealgorithms.datastructures.trees.QItem -> com.a.e.m.G:
    com.thealgorithms.datastructures.trees.TreeNode node -> a
    int hd -> b
    30:33:void <init>(com.thealgorithms.datastructures.trees.TreeNode,int) -> <init>
com.thealgorithms.datastructures.trees.RedBlackBST -> com.a.e.m.H:
    int R -> a
    int B -> b
    com.thealgorithms.datastructures.trees.RedBlackBST$Node nil -> c
    com.thealgorithms.datastructures.trees.RedBlackBST$Node root -> d
    8:24:void <init>() -> <init>
    27:40:void printTree(com.thealgorithms.datastructures.trees.RedBlackBST$Node) -> a
    43:56:void printTreepre(com.thealgorithms.datastructures.trees.RedBlackBST$Node) -> b
    59:73:com.thealgorithms.datastructures.trees.RedBlackBST$Node findNode(com.thealgorithms.datastructures.trees.RedBlackBST$Node,com.thealgorithms.datastructures.trees.RedBlackBST$Node) -> b
    77:105:void insert(com.thealgorithms.datastructures.trees.RedBlackBST$Node) -> h
    108:146:void fixTree(com.thealgorithms.datastructures.trees.RedBlackBST$Node) -> i
    149:171:void rotateLeft(com.thealgorithms.datastructures.trees.RedBlackBST$Node) -> c
    174:197:void rotateRight(com.thealgorithms.datastructures.trees.RedBlackBST$Node) -> d
    200:208:void transplant(com.thealgorithms.datastructures.trees.RedBlackBST$Node,com.thealgorithms.datastructures.trees.RedBlackBST$Node) -> a
    211:214:com.thealgorithms.datastructures.trees.RedBlackBST$Node treeMinimum(com.thealgorithms.datastructures.trees.RedBlackBST$Node) -> e
    218:250:boolean delete(com.thealgorithms.datastructures.trees.RedBlackBST$Node) -> f
    254:308:void deleteFixup(com.thealgorithms.datastructures.trees.RedBlackBST$Node) -> g
    311:330:void insertDemo() -> a
    333:351:void deleteDemo() -> b
    8:8:com.thealgorithms.datastructures.trees.RedBlackBST$Node access$000(com.thealgorithms.datastructures.trees.RedBlackBST) -> a
com.thealgorithms.datastructures.trees.RedBlackBST$Node -> com.a.e.m.I:
    int key -> a
    int color -> b
    com.thealgorithms.datastructures.trees.RedBlackBST$Node left -> c
    com.thealgorithms.datastructures.trees.RedBlackBST$Node right -> d
    com.thealgorithms.datastructures.trees.RedBlackBST$Node p -> e
    com.thealgorithms.datastructures.trees.RedBlackBST this$0 -> f
    15:20:void <init>(com.thealgorithms.datastructures.trees.RedBlackBST,int) -> <init>
com.thealgorithms.datastructures.trees.SegmentTree -> com.a.e.m.J:
    int[] seg_t -> a
    int n -> b
    int[] arr -> c
    10:19:void <init>(int,int[]) -> <init>
    23:32:int constructTree(int[],int,int,int) -> a
    44:54:void updateTree(int,int,int,int,int) -> a
    58:65:void update(int,int) -> a
    75:86:int getSumTree(int,int,int,int,int) -> b
    92:95:int getSum(int,int) -> b
com.thealgorithms.datastructures.trees.Tree -> com.a.e.m.K:
    com.thealgorithms.datastructures.trees.TreeNode root -> a
    42:44:void <init>() -> <init>
    46:48:void <init>(com.thealgorithms.datastructures.trees.TreeNode) -> <init>
    53:86:void printTopView() -> a
com.thealgorithms.datastructures.trees.TreeNode -> com.a.e.m.L:
    int key -> a
    com.thealgorithms.datastructures.trees.TreeNode left -> b
    com.thealgorithms.datastructures.trees.TreeNode right -> c
    16:19:void <init>(int) -> <init>
com.thealgorithms.datastructures.trees.TreeRandomNode -> com.a.e.m.M:
    java.util.ArrayList list -> a
    com.thealgorithms.datastructures.trees.TreeRandomNode$Node root -> b
    44:46:void <init>() -> <init>
    50:60:void inOrder(com.thealgorithms.datastructures.trees.TreeRandomNode$Node) -> a
    63:73:void getRandom(com.thealgorithms.datastructures.trees.TreeRandomNode$Node) -> b
    40:40:void <clinit>() -> <clinit>
com.thealgorithms.datastructures.trees.TreeRandomNode$Node -> com.a.e.m.N:
    int item -> a
    com.thealgorithms.datastructures.trees.TreeRandomNode$Node left -> b
    com.thealgorithms.datastructures.trees.TreeRandomNode$Node right -> c
    com.thealgorithms.datastructures.trees.TreeRandomNode this$0 -> d
    33:36:void <init>(com.thealgorithms.datastructures.trees.TreeRandomNode,int) -> <init>
com.thealgorithms.datastructures.trees.TreeTraversal -> com.a.e.m.O:
    9:9:void <init>() -> <init>
    12:36:void main(java.lang.String[]) -> main
com.thealgorithms.datastructures.trees.TrieImp -> com.a.e.m.P:
    com.thealgorithms.datastructures.trees.TrieImp$TrieNode root -> a
    25:27:void <init>() -> <init>
    30:40:void insert(java.lang.String) -> a
    43:52:boolean search(java.lang.String) -> b
    56:69:boolean delete(java.lang.String) -> c
    73:74:void sop(java.lang.String) -> d
    80:80:boolean isValid(java.lang.String) -> e
    84:141:void main(java.lang.String[]) -> main
com.thealgorithms.datastructures.trees.TrieImp$TrieNode -> com.a.e.m.Q:
    com.thealgorithms.datastructures.trees.TrieImp$TrieNode[] child -> a
    boolean end -> b
    com.thealgorithms.datastructures.trees.TrieImp this$0 -> c
    17:20:void <init>(com.thealgorithms.datastructures.trees.TrieImp) -> <init>
com.thealgorithms.datastructures.trees.ValidBSTOrNot -> com.a.e.m.R:
    3:3:void <init>() -> <init>
    24:24:boolean isBST(com.thealgorithms.datastructures.trees.ValidBSTOrNot$Node) -> a
    31:45:boolean isBSTUtil(com.thealgorithms.datastructures.trees.ValidBSTOrNot$Node,int,int) -> a
com.thealgorithms.datastructures.trees.ValidBSTOrNot$Node -> com.a.e.m.S:
    int data -> a
    com.thealgorithms.datastructures.trees.ValidBSTOrNot$Node left -> b
    com.thealgorithms.datastructures.trees.ValidBSTOrNot$Node right -> c
    com.thealgorithms.datastructures.trees.ValidBSTOrNot this$0 -> d
    10:13:void <init>(com.thealgorithms.datastructures.trees.ValidBSTOrNot,int) -> <init>
com.thealgorithms.datastructures.trees.VerticalOrderTraversal -> com.a.e.m.T:
    23:23:void <init>() -> <init>
    26:37:void main(java.lang.String[]) -> main
    43:103:java.util.ArrayList verticalTraversal(com.thealgorithms.datastructures.trees.BinaryTree$Node) -> a
com.thealgorithms.devutils.entities.ProcessDetails -> com.a.f.a.a:
    java.lang.String processId -> a
    int arrivalTime -> b
    int burstTime -> c
    int waitingTime -> d
    int turnAroundTime -> e
    10:14:void <init>(java.lang.String,int,int) -> <init>
    17:17:java.lang.String getProcessId() -> a
    21:21:int getArrivalTime() -> b
    25:25:int getBurstTime() -> c
    30:30:int getWaitingTime() -> d
    34:34:int getTurnAroundTimeTime() -> e
    38:39:void setProcessId(java.lang.String) -> a
    42:43:void setArrivalTime(int) -> a
    46:47:void setBurstTime(int) -> b
    50:51:void setWaitingTime(int) -> c
    54:55:void setTurnAroundTimeTime(int) -> d
com.thealgorithms.devutils.nodes.LargeTreeNode -> com.a.f.b.a:
    java.util.Collection childNodes -> a
    24:25:void <init>() -> <init>
    34:35:void <init>(java.lang.Object) -> <init>
    45:46:void <init>(java.lang.Object,com.thealgorithms.devutils.nodes.LargeTreeNode) -> <init>
    61:63:void <init>(java.lang.Object,com.thealgorithms.devutils.nodes.LargeTreeNode,java.util.Collection) -> <init>
    71:71:boolean isLeafNode() -> a
    75:75:java.util.Collection getChildNodes() -> b
    79:80:void setChildNodes(java.util.Collection) -> a
com.thealgorithms.devutils.nodes.Node -> com.a.f.b.b:
    java.lang.Object data -> a
    23:23:void <init>() -> <init>
    30:32:void <init>(java.lang.Object) -> <init>
    35:35:java.lang.Object getData() -> c
    39:40:void setData(java.lang.Object) -> a
com.thealgorithms.devutils.nodes.SimpleNode -> com.a.f.b.c:
    com.thealgorithms.devutils.nodes.SimpleNode nextNode -> a
    21:22:void <init>() -> <init>
    31:32:void <init>(java.lang.Object) -> <init>
    41:43:void <init>(java.lang.Object,com.thealgorithms.devutils.nodes.SimpleNode) -> <init>
    49:49:boolean hasNext() -> a
    53:53:com.thealgorithms.devutils.nodes.SimpleNode getNextNode() -> b
    57:58:void setNextNode(com.thealgorithms.devutils.nodes.SimpleNode) -> a
com.thealgorithms.devutils.nodes.SimpleTreeNode -> com.a.f.b.d:
    com.thealgorithms.devutils.nodes.SimpleTreeNode leftNode -> a
    com.thealgorithms.devutils.nodes.SimpleTreeNode rightNode -> b
    26:27:void <init>() -> <init>
    36:37:void <init>(java.lang.Object) -> <init>
    47:48:void <init>(java.lang.Object,com.thealgorithms.devutils.nodes.SimpleTreeNode) -> <init>
    66:69:void <init>(java.lang.Object,com.thealgorithms.devutils.nodes.SimpleTreeNode,com.thealgorithms.devutils.nodes.SimpleTreeNode,com.thealgorithms.devutils.nodes.SimpleTreeNode) -> <init>
    77:77:boolean isLeafNode() -> a
    81:81:com.thealgorithms.devutils.nodes.SimpleTreeNode getLeftNode() -> b
    85:86:void setLeftNode(com.thealgorithms.devutils.nodes.SimpleTreeNode) -> a
    89:89:com.thealgorithms.devutils.nodes.SimpleTreeNode getRightNode() -> d
    93:94:void setRightNode(com.thealgorithms.devutils.nodes.SimpleTreeNode) -> b
com.thealgorithms.devutils.nodes.TreeNode -> com.a.f.b.e:
    com.thealgorithms.devutils.nodes.TreeNode parentNode -> a
    int depth -> b
    27:29:void <init>() -> <init>
    38:40:void <init>(java.lang.Object) -> <init>
    49:52:void <init>(java.lang.Object,com.thealgorithms.devutils.nodes.TreeNode) -> <init>
    boolean isLeafNode() -> a
    63:63:boolean isRootNode() -> e
    67:67:com.thealgorithms.devutils.nodes.TreeNode getParent() -> f
    71:73:void setParent(com.thealgorithms.devutils.nodes.TreeNode) -> a
    76:76:int getDepth() -> g
com.thealgorithms.devutils.searches.MatrixSearchAlgorithm -> com.a.f.c.a:
    int[] find(java.lang.Comparable[][],java.lang.Comparable) -> a
com.thealgorithms.devutils.searches.SearchAlgorithm -> com.a.f.c.b:
    int find(java.lang.Comparable[],java.lang.Comparable) -> a
com.thealgorithms.divideandconquer.BinaryExponentiation -> com.a.g.a:
    3:3:void <init>() -> <init>
    6:7:void main(java.lang.String[]) -> main
    12:20:long calculatePower(long,long) -> a
com.thealgorithms.divideandconquer.ClosestPair -> com.a.g.b:
    int numberPoints -> a
    com.thealgorithms.divideandconquer.ClosestPair$Location[] array -> d
    com.thealgorithms.divideandconquer.ClosestPair$Location point1 -> b
    com.thealgorithms.divideandconquer.ClosestPair$Location point2 -> c
    double minNum -> e
    int secondCount -> f
    31:32:void setMinNum(double) -> a
    35:36:void setSecondCount(int) -> a
    20:49:void <init>(int) -> <init>
    70:70:com.thealgorithms.divideandconquer.ClosestPair$Location[] createLocation(int) -> b
    74:74:com.thealgorithms.divideandconquer.ClosestPair$Location buildLocation(double,double) -> a
    86:101:int xPartition(com.thealgorithms.divideandconquer.ClosestPair$Location[],int,int) -> a
    113:128:int yPartition(com.thealgorithms.divideandconquer.ClosestPair$Location[],int,int) -> b
    143:148:void xQuickSort(com.thealgorithms.divideandconquer.ClosestPair$Location[],int,int) -> c
    162:167:void yQuickSort(com.thealgorithms.divideandconquer.ClosestPair$Location[],int,int) -> d
    177:259:double closestPair(com.thealgorithms.divideandconquer.ClosestPair$Location[],int) -> a
    269:314:double bruteForce(com.thealgorithms.divideandconquer.ClosestPair$Location[]) -> a
    324:355:void main(java.lang.String[]) -> main
    28:41:void <clinit>() -> <clinit>
com.thealgorithms.divideandconquer.ClosestPair$Location -> com.a.g.c:
    double x -> a
    double y -> b
    63:66:void <init>(double,double) -> <init>
com.thealgorithms.divideandconquer.SkylineAlgorithm -> com.a.g.d:
    java.util.ArrayList points -> a
    20:22:void <init>() -> <init>
    28:28:java.util.ArrayList getPoints() -> a
    49:77:java.util.ArrayList produceSubSkyLines(java.util.ArrayList) -> a
    100:131:java.util.ArrayList produceFinalSkyLine(java.util.ArrayList,java.util.ArrayList) -> a
com.thealgorithms.divideandconquer.SkylineAlgorithm$Point -> com.a.g.e:
    int x -> a
    int y -> b
    146:149:void <init>(int,int) -> <init>
    155:155:int getX() -> a
    162:162:int getY() -> b
    175:175:boolean dominates(com.thealgorithms.divideandconquer.SkylineAlgorithm$Point) -> a
    134:134:int access$000(com.thealgorithms.divideandconquer.SkylineAlgorithm$Point) -> b
    134:134:int access$100(com.thealgorithms.divideandconquer.SkylineAlgorithm$Point) -> c
com.thealgorithms.divideandconquer.SkylineAlgorithm$XComparator -> com.a.g.f:
    com.thealgorithms.divideandconquer.SkylineAlgorithm this$0 -> a
    186:186:void <init>(com.thealgorithms.divideandconquer.SkylineAlgorithm) -> <init>
    190:190:int compare(com.thealgorithms.divideandconquer.SkylineAlgorithm$Point,com.thealgorithms.divideandconquer.SkylineAlgorithm$Point) -> a
    186:186:int compare(java.lang.Object,java.lang.Object) -> compare
com.thealgorithms.divideandconquer.StrassenMatrixMultiplication -> com.a.g.g:
    5:5:void <init>() -> <init>
    10:80:int[][] multiply(int[][],int[][]) -> a
    86:96:int[][] sub(int[][],int[][]) -> b
    102:112:int[][] add(int[][],int[][]) -> c
    119:124:void split(int[][],int[][],int,int) -> a
    130:135:void join(int[][],int[][],int,int) -> b
    140:181:void main(java.lang.String[]) -> main
com.thealgorithms.dynamicprogramming.BoardPath -> com.a.h.a:
    long startTime -> a
    long endTime -> b
    28:28:void <init>() -> <init>
    34:35:void startAlgo() -> a
    38:39:long endAlgo() -> b
    43:52:int bpR(int,int) -> a
    56:69:int bpRS(int,int,int[]) -> a
    73:81:int bpIS(int,int,int[]) -> b
com.thealgorithms.dynamicprogramming.BoundaryFill -> com.a.h.b:
    7:7:void <init>() -> <init>
    21:21:int getPixel(int[][],int,int) -> a
    37:38:void putPixel(int[][],int,int,int) -> a
    56:120:void boundaryFill(int[][],int,int,int,int) -> a
    128:135:void printImageArray(int[][]) -> a
    140:164:void main(java.lang.String[]) -> main
com.thealgorithms.dynamicprogramming.BruteForceKnapsack -> com.a.h.c:
    5:5:void <init>() -> <init>
    10:10:int max(int,int) -> a
    18:34:int knapSack(int,int[],int[],int) -> a
    41:46:void main(java.lang.String[]) -> main
com.thealgorithms.dynamicprogramming.CoinChange -> com.a.h.d:
    6:6:void <init>() -> <init>
    10:25:void main(java.lang.String[]) -> main
    36:47:int change(int[],int) -> a
    59:81:int minimumCoins(int[],int) -> b
    86:90:void printAmount(int[]) -> a
com.thealgorithms.dynamicprogramming.CountFriendsPairing -> com.a.h.e:
    16:16:void <init>() -> <init>
    19:33:boolean countFriendsPairing(int,int[]) -> a
com.thealgorithms.dynamicprogramming.DP -> com.a.h.f:
    16:16:void <init>() -> <init>
    24:41:long findWays(int,int,int) -> a
    45:50:void main(java.lang.String[]) -> main
com.thealgorithms.dynamicprogramming.DyanamicProgrammingKnapsack -> com.a.h.g:
    5:5:void <init>() -> <init>
    8:8:int max(int,int) -> a
    15:31:int knapSack(int,int[],int[],int) -> a
    36:41:void main(java.lang.String[]) -> main
com.thealgorithms.dynamicprogramming.EditDistance -> com.a.h.h:
    27:27:void <init>() -> <init>
    30:67:int minDistance(java.lang.String,java.lang.String) -> a
    71:88:void main(java.lang.String[]) -> main
    92:93:int editDistance(java.lang.String,java.lang.String) -> b
    97:119:int editDistance(java.lang.String,java.lang.String,int[][]) -> a
com.thealgorithms.dynamicprogramming.EggDropping -> com.a.h.i:
    6:6:void <init>() -> <init>
    10:40:int minTrials(int,int) -> a
    44:48:void main(java.lang.String[]) -> main
com.thealgorithms.dynamicprogramming.Fibonacci -> com.a.h.j:
    java.util.Map map -> a
    10:10:void <init>() -> <init>
    16:23:void main(java.lang.String[]) -> main
    32:44:int fibMemo(int) -> a
    54:66:int fibBotUp(int) -> b
    83:92:int fibOptimized(int) -> c
    12:12:void <clinit>() -> <clinit>
com.thealgorithms.dynamicprogramming.FordFulkerson -> com.a.h.k:
    int INF -> a
    int V -> b
    int[][] capacity -> c
    int[][] flow -> d
    7:7:void <init>() -> <init>
    15:32:void main(java.lang.String[]) -> main
    35:83:int networkFlow(int,int) -> a
com.thealgorithms.dynamicprogramming.KadaneAlgorithm -> com.a.h.l:
    8:8:void <init>() -> <init>
    11:21:boolean max_Sum(int[],int) -> a
com.thealgorithms.dynamicprogramming.Knapsack -> com.a.h.m:
    6:6:void <init>() -> <init>
    10:33:int knapSack(int,int[],int[],int) -> a
    38:42:void main(java.lang.String[]) -> main
com.thealgorithms.dynamicprogramming.KnapsackMemoization -> com.a.h.n:
    int[][] t -> a
    8:8:void <init>() -> <init>
    15:38:int knapsack(int[],int[],int,int) -> a
    43:50:void main(java.lang.String[]) -> main
    47:47:void lambda$main$0(int[]) -> a
com.thealgorithms.dynamicprogramming.LevenshteinDistance -> com.a.h.o:
    8:8:void <init>() -> <init>
    11:16:int minimum(int,int,int) -> a
    21:47:int calculate_distance(java.lang.String,java.lang.String) -> a
    51:58:void main(java.lang.String[]) -> main
com.thealgorithms.dynamicprogramming.LongestAlternatingSubsequence -> com.a.h.p:
    13:13:void <init>() -> <init>
    31:60:int AlternatingLength(int[],int) -> a
    64:71:void main(java.lang.String[]) -> main
com.thealgorithms.dynamicprogramming.LongestCommonSubsequence -> com.a.h.q:
    3:3:void <init>() -> <init>
    7:40:java.lang.String getLCS(java.lang.String,java.lang.String) -> a
    48:61:java.lang.String lcsString(java.lang.String,java.lang.String,int[][]) -> a
    65:76:void main(java.lang.String[]) -> main
com.thealgorithms.dynamicprogramming.LongestIncreasingSubsequence -> com.a.h.r:
    8:8:void <init>() -> <init>
    11:22:void main(java.lang.String[]) -> main
    25:34:int upperBound(int[],int,int,int) -> a
    38:66:int LIS(int[]) -> b
    74:85:int findLISLen(int[]) -> a
    91:107:int binarySearchBetween(int[],int,int) -> a
com.thealgorithms.dynamicprogramming.LongestPalindromicSubsequence -> com.a.h.s:
    7:7:void <init>() -> <init>
    10:18:void main(java.lang.String[]) -> main
    21:23:java.lang.String LPS(java.lang.String) -> a
    27:68:java.lang.String recursiveLPS(java.lang.String,java.lang.String) -> a
com.thealgorithms.dynamicprogramming.LongestPalindromicSubstring -> com.a.h.t:
    6:6:void <init>() -> <init>
    9:17:void main(java.lang.String[]) -> main
    20:51:java.lang.String LPS(java.lang.String) -> a
com.thealgorithms.dynamicprogramming.LongestValidParentheses -> com.a.h.u:
    12:12:void <init>() -> <init>
    15:44:int getLongestValidParentheses(java.lang.String) -> a
    48:60:void main(java.lang.String[]) -> main
com.thealgorithms.dynamicprogramming.Matrix -> com.a.h.v:
    int count -> a
    int col -> b
    int row -> c
    129:133:void <init>(int,int,int) -> <init>
    136:136:int count() -> a
    140:140:int col() -> b
    144:144:int row() -> c
com.thealgorithms.dynamicprogramming.MatrixChainMultiplication -> com.a.h.w:
    java.util.Scanner scan -> a
    java.util.ArrayList mArray -> b
    int size -> c
    int[][] m -> d
    int[][] s -> e
    int[] p -> f
    7:7:void <init>() -> <init>
    17:74:void main(java.lang.String[]) -> main
    77:85:void printOptimalParens(int,int) -> a
    88:94:void printArray(int[][]) -> a
    97:115:void matrixChainOrder() -> a
    118:119:java.lang.String[] input(java.lang.String) -> a
    9:10:void <clinit>() -> <clinit>
com.thealgorithms.dynamicprogramming.MatrixChainRecursiveTopDownMemoisation -> com.a.h.x:
    9:9:void <init>() -> <init>
    12:19:int Memoized_Matrix_Chain(int[]) -> a
    23:40:int Lookup_Chain(int[][],int[],int,int) -> a
    46:50:void main(java.lang.String[]) -> main
com.thealgorithms.dynamicprogramming.MemoizationTechniqueKnapsack -> com.a.h.y:
    6:6:void <init>() -> <init>
    11:11:int max(int,int) -> a
    17:37:int knapSackRec(int,int[],int[],int,int[][]) -> a
    45:55:int knapSack(int,int[],int[],int) -> a
    60:67:void main(java.lang.String[]) -> main
com.thealgorithms.dynamicprogramming.MinimumPathSum -> com.a.h.z:
    28:28:void <init>() -> <init>
    31:33:void testRegular() -> a
    36:38:void testLessColumns() -> b
    41:43:void testLessRows() -> c
    46:48:void testOneRowOneColumn() -> d
    51:68:int minimumPathSum(int[][]) -> a
com.thealgorithms.dynamicprogramming.MinimumSumPartition -> com.a.h.A:
    boolean $assertionsDisabled -> a
    18:18:void <init>() -> <init>
    21:53:int subSet(int[]) -> a
    63:67:int getSum(int[]) -> b
    71:78:int getMin(int[],int) -> a
    85:88:void main(java.lang.String[]) -> main
    18:18:void <clinit>() -> <clinit>
com.thealgorithms.dynamicprogramming.NewManShanksPrime -> com.a.h.B:
    10:10:void <init>() -> <init>
    13:21:boolean nthManShanksPrime(int,int) -> a
com.thealgorithms.dynamicprogramming.PalindromicPartitioning -> com.a.h.C:
    20:20:void <init>() -> <init>
    23:82:int minimalpartitions(java.lang.String) -> a
    86:99:void main(java.lang.String[]) -> main
com.thealgorithms.dynamicprogramming.RegexMatching -> com.a.h.D:
    15:15:void <init>() -> <init>
    20:50:boolean regexRecursion(java.lang.String,java.lang.String) -> a
    61:88:boolean regexRecursion(java.lang.String,java.lang.String,int,int) -> a
    100:131:boolean regexRecursion(java.lang.String,java.lang.String,int,int,int[][]) -> a
    137:165:boolean regexBU(java.lang.String,java.lang.String) -> b
    169:178:void main(java.lang.String[]) -> main
com.thealgorithms.dynamicprogramming.RodCutting -> com.a.h.E:
    8:8:void <init>() -> <init>
    11:23:int cutRod(int[],int) -> a
    28:31:void main(java.lang.String[]) -> main
com.thealgorithms.dynamicprogramming.ShortestSuperSequence -> com.a.h.F:
    4:4:void <init>() -> <init>
    9:17:int shortestSuperSequence(java.lang.String,java.lang.String) -> a
    23:44:int lcs(java.lang.String,java.lang.String,int,int) -> a
    49:57:void main(java.lang.String[]) -> main
com.thealgorithms.dynamicprogramming.SubsetCount -> com.a.h.G:
    8:8:void <init>() -> <init>
    25:39:int getCount(int[],int) -> a
    51:66:int getCountSO(int[],int) -> b
com.thealgorithms.dynamicprogramming.SubsetSum -> com.a.h.H:
    boolean $assertionsDisabled -> a
    3:3:void <init>() -> <init>
    9:16:void main(java.lang.String[]) -> main
    26:46:boolean subsetSum(int[],int) -> a
    3:3:void <clinit>() -> <clinit>
com.thealgorithms.dynamicprogramming.Sum_Of_Subset -> com.a.h.I:
    3:3:void <init>() -> <init>
    6:14:void main(java.lang.String[]) -> main
    17:27:boolean subsetSum(int[],int,int) -> a
com.thealgorithms.dynamicprogramming.UniquePaths -> com.a.h.J:
    18:18:void <init>() -> <init>
    21:28:boolean uniquePaths(int,int,int) -> a
    34:46:boolean uniquePaths2(int,int,int) -> b
com.thealgorithms.dynamicprogramming.WineProblem -> com.a.h.K:
    13:13:void <init>() -> <init>
    18:29:int WPRecursion(int[],int,int) -> a
    35:51:int WPTD(int[],int,int,int[][]) -> a
    57:74:int WPBU(int[]) -> a
    78:85:void main(java.lang.String[]) -> main
com.thealgorithms.maths.AbsoluteValue -> com.a.i.a:
    3:3:void <init>() -> <init>
    12:12:int getAbsValue(int) -> a
com.thealgorithms.maths.AmicableNumber -> com.a.i.b:
    20:20:void <init>() -> <init>
    23:27:void main(java.lang.String[]) -> main
    38:62:void findAllInRange(int,int) -> a
    72:75:boolean isAmicableNumber(int,int) -> b
    88:93:int recursiveCalcOfDividerSum(int,int) -> c
com.thealgorithms.maths.Area -> com.a.i.c:
    java.lang.String POSITIVE_RADIUS -> a
    java.lang.String POSITIVE_HEIGHT -> b
    java.lang.String POSITIVE_BASE -> c
    6:6:void <init>() -> <init>
    30:33:double surfaceAreaCube(double) -> a
    43:46:double surfaceAreaSphere(double) -> b
    57:63:double surfaceAreaRectangle(double,double) -> a
    74:80:double surfaceAreaCylinder(double,double) -> b
    90:93:double surfaceAreaSquare(double) -> c
    104:110:double surfaceAreaTriangleRectangle(double,double) -> c
    121:127:double surfaceAreaParallelogram(double,double) -> d
    139:148:double surfaceAreaTrapezium(double,double,double) -> a
    158:161:double surfaceAreaCircle(double) -> d
    171:174:double surfaceAreaHemisphere(double) -> e
    185:191:double surfaceAreaCone(double,double) -> e
com.thealgorithms.maths.Armstrong -> com.a.i.d:
    10:10:void <init>() -> <init>
    20:27:boolean isArmstrong(int) -> a
com.thealgorithms.maths.AutomorphicNumber -> com.a.i.e:
    11:11:void <init>() -> <init>
    16:36:boolean isAutomorphic(int) -> a
    46:56:void main(java.lang.String[]) -> main
com.thealgorithms.maths.Average -> com.a.i.f:
    double SMALL_VALUE -> b
    boolean $assertionsDisabled -> a
    6:6:void <init>() -> <init>
    11:25:void main(java.lang.String[]) -> main
    34:38:double average(double[]) -> a
    49:53:int average(int[]) -> a
    6:6:void <clinit>() -> <clinit>
com.thealgorithms.maths.BinaryPow -> com.a.i.g:
    3:3:void <init>() -> <init>
    14:22:int binPow(int,int) -> a
com.thealgorithms.maths.BinomialCoefficient -> com.a.i.h:
    13:13:void <init>() -> <init>
    28:40:int binomialCoefficient(int,int) -> a
com.thealgorithms.maths.Ceil -> com.a.i.i:
    3:3:void <init>() -> <init>
    13:18:double ceil(double) -> a
com.thealgorithms.maths.CircularConvolutionFFT -> com.a.i.j:
    12:12:void <init>() -> <init>
    21:27:void padding(java.util.ArrayList,int) -> a
    45:59:java.util.ArrayList fftCircularConvolution(java.util.ArrayList,java.util.ArrayList) -> a
com.thealgorithms.maths.CollatzConjecture -> com.a.i.k:
    9:9:void <init>() -> <init>
    18:21:int nextNumber(int) -> a
    31:40:java.util.List collatzConjecture(int) -> b
com.thealgorithms.maths.Combinations -> com.a.i.l:
    6:6:void <init>() -> <init>
    15:18:long factorial(int) -> a
    29:29:long combinations(int,int) -> a
    46:58:long combinationsOptimized(int,int) -> b
com.thealgorithms.maths.Convolution -> com.a.i.m:
    9:9:void <init>() -> <init>
    21:43:double[] convolution(double[],double[]) -> a
com.thealgorithms.maths.ConvolutionFFT -> com.a.i.n:
    12:12:void <init>() -> <init>
    21:27:void padding(java.util.ArrayList,int) -> a
    49:65:java.util.ArrayList convolutionFFT(java.util.ArrayList,java.util.ArrayList) -> a
com.thealgorithms.maths.DeterminantOfMatrix -> com.a.i.o:
    9:9:void <init>() -> <init>
    14:37:int determinant(int[][],int) -> a
    42:54:void main(java.lang.String[]) -> main
com.thealgorithms.maths.DigitalRoot -> com.a.i.p:
    39:39:void <init>() -> <init>
    42:45:int digitalRoot(int) -> a
    51:54:int single(int) -> b
com.thealgorithms.maths.DistanceFormula -> com.a.i.q:
    3:3:void <init>() -> <init>
    11:14:double euclideanDistance(double,double,double,double) -> a
    23:24:double manhattanDistance(double,double,double,double) -> b
    28:38:int hammingDistance(int[],int[]) -> a
    42:55:double minkowskiDistance(double[],double[],int) -> a
com.thealgorithms.maths.DudeneyNumber -> com.a.i.r:
    11:11:void <init>() -> <init>
    16:40:boolean isDudeney(int) -> a
com.thealgorithms.maths.EulerMethod -> com.a.i.s:
    boolean $assertionsDisabled -> a
    18:18:void <init>() -> <init>
    25:63:void main(java.lang.String[]) -> main
    81:90:double eulerStep(double,double,double,java.util.function.BiFunction) -> a
    112:138:java.util.ArrayList eulerFull(double,double,double,double,java.util.function.BiFunction) -> a
    59:60:void lambda$main$5(double[]) -> a
    49:49:java.lang.Double lambda$main$4(java.lang.Double,java.lang.Double) -> a
    41:42:void lambda$main$3(double[]) -> b
    37:37:java.lang.Double lambda$main$2(java.lang.Double,java.lang.Double) -> b
    30:31:void lambda$main$1(double[]) -> c
    26:26:java.lang.Double lambda$main$0(java.lang.Double,java.lang.Double) -> c
    18:18:void <clinit>() -> <clinit>
com.thealgorithms.maths.FFT -> com.a.i.t:
    13:13:void <init>() -> <init>
    188:210:java.util.ArrayList fft(java.util.ArrayList,boolean) -> a
    215:219:int findLog2(int) -> a
    229:235:java.util.ArrayList fftBitReversal(int,int,java.util.ArrayList) -> a
    244:250:java.util.ArrayList inverseFFT(int,boolean,java.util.ArrayList) -> a
    270:276:int reverseBits(int,int) -> a
    286:294:void paddingPowerOfTwo(java.util.ArrayList) -> a
com.thealgorithms.maths.FFT$Complex -> com.a.i.u:
    double real -> a
    double img -> b
    30:33:void <init>() -> <init>
    41:44:void <init>(double,double) -> <init>
    52:52:double getReal() -> a
    61:61:double getImaginary() -> b
    71:74:com.thealgorithms.maths.FFT$Complex add(com.thealgorithms.maths.FFT$Complex) -> a
    84:87:com.thealgorithms.maths.FFT$Complex subtract(com.thealgorithms.maths.FFT$Complex) -> b
    97:100:com.thealgorithms.maths.FFT$Complex multiply(com.thealgorithms.maths.FFT$Complex) -> c
    110:113:com.thealgorithms.maths.FFT$Complex multiply(double) -> a
    122:125:com.thealgorithms.maths.FFT$Complex conjugate() -> c
    134:134:double abs() -> d
    144:149:com.thealgorithms.maths.FFT$Complex divide(com.thealgorithms.maths.FFT$Complex) -> d
    159:162:com.thealgorithms.maths.FFT$Complex divide(double) -> b
com.thealgorithms.maths.FFTBluestein -> com.a.i.v:
    12:12:void <init>() -> <init>
    27:76:void fftBluestein(java.util.ArrayList,boolean) -> a
com.thealgorithms.maths.Factorial -> com.a.i.w:
    boolean $assertionsDisabled -> a
    3:3:void <init>() -> <init>
    7:11:void main(java.lang.String[]) -> main
    20:25:long factorial(int) -> a
    3:3:void <clinit>() -> <clinit>
com.thealgorithms.maths.FactorialRecursion -> com.a.i.x:
    boolean $assertionsDisabled -> a
    3:3:void <init>() -> <init>
    7:12:void main(java.lang.String[]) -> main
    21:24:long factorial(int) -> a
    3:3:void <clinit>() -> <clinit>
com.thealgorithms.maths.FastInverseSqrt -> com.a.i.y:
    11:11:void <init>() -> <init>
    14:20:boolean inverseSqrt(float) -> a
    29:38:boolean inverseSqrt(double) -> a
com.thealgorithms.maths.FibonacciNumber -> com.a.i.z:
    boolean $assertionsDisabled -> a
    6:6:void <init>() -> <init>
    9:14:void main(java.lang.String[]) -> main
    24:25:boolean isPerfectSquare(int) -> a
    38:40:boolean isFibonacciNumber(int) -> b
    6:6:void <clinit>() -> <clinit>
com.thealgorithms.maths.FindKthNumber -> com.a.i.A:
    java.util.Random random -> b
    boolean $assertionsDisabled -> a
    9:9:void <init>() -> <init>
    15:29:void main(java.lang.String[]) -> main
    32:38:int[] generateArray(int) -> a
    42:53:int findKthMax(int[],int) -> a
    57:66:int partition(int[],int,int) -> a
    70:73:void swap(int[],int,int) -> b
    9:11:void <clinit>() -> <clinit>
com.thealgorithms.maths.FindMax -> com.a.i.B:
    boolean $assertionsDisabled -> a
    6:6:void <init>() -> <init>
    12:24:void main(java.lang.String[]) -> main
    33:39:int findMax(int[]) -> a
    6:6:void <clinit>() -> <clinit>
com.thealgorithms.maths.FindMaxRecursion -> com.a.i.C:
    boolean $assertionsDisabled -> a
    6:6:void <init>() -> <init>
    9:24:void main(java.lang.String[]) -> main
    35:44:int max(int[],int,int) -> a
    55:57:int max(int[],int) -> a
    6:6:void <clinit>() -> <clinit>
com.thealgorithms.maths.FindMin -> com.a.i.D:
    boolean $assertionsDisabled -> a
    6:6:void <init>() -> <init>
    12:24:void main(java.lang.String[]) -> main
    33:39:int findMin(int[]) -> a
    6:6:void <clinit>() -> <clinit>
com.thealgorithms.maths.FindMinRecursion -> com.a.i.E:
    boolean $assertionsDisabled -> a
    6:6:void <init>() -> <init>
    12:27:void main(java.lang.String[]) -> main
    38:47:int min(int[],int,int) -> a
    58:60:int min(int[],int) -> a
    6:6:void <clinit>() -> <clinit>
com.thealgorithms.maths.Floor -> com.a.i.F:
    boolean $assertionsDisabled -> a
    5:5:void <init>() -> <init>
    8:13:void main(java.lang.String[]) -> main
    23:28:double floor(double) -> a
    5:5:void <clinit>() -> <clinit>
com.thealgorithms.maths.GCD -> com.a.i.G:
    9:9:void <init>() -> <init>
    19:32:int gcd(int,int) -> a
    42:47:int gcd(int[]) -> a
    51:60:void main(java.lang.String[]) -> main
com.thealgorithms.maths.GCDRecursion -> com.a.i.H:
    6:6:void <init>() -> <init>
    9:15:void main(java.lang.String[]) -> main
    25:36:int gcd(int,int) -> a
com.thealgorithms.maths.Gaussian -> com.a.i.I:
    5:5:void <init>() -> <init>
    11:26:java.util.ArrayList gaussian(int,java.util.ArrayList) -> a
    35:45:double[][] gaussianElimination(int,int,double[][]) -> a
    54:76:java.util.ArrayList valueOfGaussian(int,double[][],double[][]) -> a
com.thealgorithms.maths.GenericRoot -> com.a.i.J:
    6:6:void <init>() -> <init>
    9:15:void main(java.lang.String[]) -> main
    18:27:int genericRoot(int) -> a
com.thealgorithms.maths.HarshadNumber -> com.a.i.K:
    6:6:void <init>() -> <init>
    9:14:void main(java.lang.String[]) -> main
    22:55:void checkHarshadNumber(long) -> a
com.thealgorithms.maths.HeronsFormula -> com.a.i.L:
    7:7:void <init>() -> <init>
    10:16:double Herons(int,int,int) -> a
com.thealgorithms.maths.JosephusProblem -> com.a.i.M:
    17:17:void <init>() -> <init>
    27:27:int findTheWinner(int,int) -> a
    31:34:int winner(int,int) -> b
com.thealgorithms.maths.JugglerSequence -> com.a.i.N:
    14:14:void <init>() -> <init>
    23:48:void jugglerSequence(int) -> a
    52:54:void main(java.lang.String[]) -> main
com.thealgorithms.maths.KaprekarNumbers -> com.a.i.O:
    6:6:void <init>() -> <init>
    15:23:java.util.ArrayList kaprekarNumberInRange(long,long) -> a
    28:65:boolean isKaprekarNumber(long) -> a
com.thealgorithms.maths.KeithNumber -> com.a.i.P:
    5:5:void <init>() -> <init>
    10:39:boolean isKeith(int) -> a
    44:51:void main(java.lang.String[]) -> main
com.thealgorithms.maths.KrishnamurthyNumber -> com.a.i.Q:
    10:10:void <init>() -> <init>
    16:42:boolean isKMurthy(int) -> a
    48:60:void main(java.lang.String[]) -> main
com.thealgorithms.maths.LeastCommonMultiple -> com.a.i.R:
    12:12:void <init>() -> <init>
    18:26:void main(java.lang.String[]) -> main
    33:50:int lcm(int,int) -> a
com.thealgorithms.maths.LeonardoNumber -> com.a.i.S:
    3:3:void <init>() -> <init>
    6:12:int leonardoNumber(int) -> a
    16:19:void main(java.lang.String[]) -> main
com.thealgorithms.maths.LiouvilleLambdaFunction -> com.a.i.T:
    15:15:void <init>() -> <init>
    26:34:int liouvilleLambda(int) -> a
com.thealgorithms.maths.LucasSeries -> com.a.i.U:
    boolean $assertionsDisabled -> a
    6:6:void <init>() -> <init>
    9:16:void main(java.lang.String[]) -> main
    26:28:int lucasSeries(int) -> a
    39:46:int lucasSeriesIteration(int) -> b
    6:6:void <clinit>() -> <clinit>
com.thealgorithms.maths.MagicSquare -> com.a.i.V:
    7:7:void <init>() -> <init>
    10:50:void main(java.lang.String[]) -> main
com.thealgorithms.maths.MatrixUtil -> com.a.i.W:
    14:14:void <init>() -> <init>
    17:17:boolean isValid(java.math.BigDecimal[][]) -> a
    24:26:boolean hasEqualSizes(java.math.BigDecimal[][],java.math.BigDecimal[][]) -> a
    36:38:boolean canMultiply(java.math.BigDecimal[][],java.math.BigDecimal[][]) -> b
    48:73:java.util.Optional operate(java.math.BigDecimal[][],java.math.BigDecimal[][],java.util.function.BiFunction) -> a
    80:80:java.util.Optional add(java.math.BigDecimal[][],java.math.BigDecimal[][]) -> c
    87:87:java.util.Optional subtract(java.math.BigDecimal[][],java.math.BigDecimal[][]) -> d
    94:126:java.util.Optional multiply(java.math.BigDecimal[][],java.math.BigDecimal[][]) -> e
    133:142:void assertThat(java.math.BigDecimal[][],java.math.BigDecimal[][]) -> f
    146:219:void main(java.lang.String[]) -> main
    208:208:java.lang.AssertionError lambda$main$7() -> a
    182:182:java.lang.AssertionError lambda$main$6() -> b
    158:158:java.lang.AssertionError lambda$main$5() -> c
    108:110:void lambda$multiply$4(int,java.math.BigDecimal[][],int,java.math.BigDecimal[][],java.math.BigDecimal[][],int) -> a
    111:122:void lambda$null$3(java.math.BigDecimal[][],int,int,java.math.BigDecimal[][],java.math.BigDecimal[][],int) -> a
    115:120:java.math.BigDecimal lambda$null$2(java.math.BigDecimal[][],int,java.math.BigDecimal[][],int,int) -> a
    60:62:void lambda$operate$1(int,java.math.BigDecimal[][],java.math.BigDecimal[][],java.math.BigDecimal[][],java.util.function.BiFunction,int) -> a
    63:70:void lambda$null$0(java.math.BigDecimal[][],int,java.math.BigDecimal[][],java.math.BigDecimal[][],java.util.function.BiFunction,int) -> a
com.thealgorithms.maths.MaxValue -> com.a.i.X:
    boolean $assertionsDisabled -> a
    5:5:void <init>() -> <init>
    11:20:void main(java.lang.String[]) -> main
    32:32:int max(int,int) -> a
    5:5:void <clinit>() -> <clinit>
com.thealgorithms.maths.Median -> com.a.i.Y:
    boolean $assertionsDisabled -> a
    8:8:void <init>() -> <init>
    11:16:void main(java.lang.String[]) -> main
    25:27:double median(int[]) -> a
    8:8:void <clinit>() -> <clinit>
com.thealgorithms.maths.MinValue -> com.a.i.Z:
    boolean $assertionsDisabled -> a
    5:5:void <init>() -> <init>
    11:20:void main(java.lang.String[]) -> main
    32:32:int min(int,int) -> a
    5:5:void <clinit>() -> <clinit>
com.thealgorithms.maths.MobiusFunction -> com.a.i.aa:
    15:15:void <init>() -> <init>
    27:55:int mobius(int) -> a
com.thealgorithms.maths.Mode -> com.a.i.ab:
    boolean $assertionsDisabled -> a
    14:14:void <init>() -> <init>
    18:32:void main(java.lang.String[]) -> main
    41:63:int[] mode(int[]) -> a
    63:63:int lambda$mode$0(java.lang.Integer) -> a
    14:14:void <clinit>() -> <clinit>
com.thealgorithms.maths.NonRepeatingElement -> com.a.i.ac:
    10:10:void <init>() -> <init>
    13:59:void main(java.lang.String[]) -> main
com.thealgorithms.maths.NthUglyNumber -> com.a.i.ad:
    18:18:void <init>() -> <init>
    22:46:long getNthUglyNo(int) -> a
    50:56:void main(java.lang.String[]) -> main
com.thealgorithms.maths.NumberOfDigits -> com.a.i.ae:
    boolean $assertionsDisabled -> a
    6:6:void <init>() -> <init>
    9:26:void main(java.lang.String[]) -> main
    35:40:int numberOfDigits(int) -> a
    50:52:int numberOfDigitsFast(int) -> b
    62:62:int numberOfDigitsFaster(int) -> c
    72:72:int numberOfDigitsRecursion(int) -> d
    6:6:void <clinit>() -> <clinit>
com.thealgorithms.maths.PalindromeNumber -> com.a.i.af:
    boolean $assertionsDisabled -> a
    3:3:void <init>() -> <init>
    6:9:void main(java.lang.String[]) -> main
    19:29:boolean isPalindrome(int) -> a
    3:3:void <clinit>() -> <clinit>
com.thealgorithms.maths.ParseInteger -> com.a.i.ag:
    boolean $assertionsDisabled -> a
    3:3:void <init>() -> <init>
    6:10:void main(java.lang.String[]) -> main
    21:37:int parseInt(java.lang.String) -> a
    3:3:void <clinit>() -> <clinit>
com.thealgorithms.maths.PascalTriangle -> com.a.i.ah:
    3:3:void <init>() -> <init>
    41:58:int[][] pascal(int) -> a
com.thealgorithms.maths.PerfectCube -> com.a.i.ai:
    boolean $assertionsDisabled -> a
    6:6:void <init>() -> <init>
    9:15:void main(java.lang.String[]) -> main
    25:26:boolean isPerfectCube(int) -> a
    6:6:void <clinit>() -> <clinit>
com.thealgorithms.maths.PerfectNumber -> com.a.i.aj:
    boolean $assertionsDisabled -> a
    12:12:void <init>() -> <init>
    15:21:void main(java.lang.String[]) -> main
    30:37:boolean isPerfectNumber(int) -> a
    12:12:void <clinit>() -> <clinit>
com.thealgorithms.maths.PerfectSquare -> com.a.i.ak:
    boolean $assertionsDisabled -> a
    6:6:void <init>() -> <init>
    9:14:void main(java.lang.String[]) -> main
    24:25:boolean isPerfectSquare(int) -> a
    6:6:void <clinit>() -> <clinit>
com.thealgorithms.maths.Perimeter -> com.a.i.al:
    3:3:void <init>() -> <init>
    6:9:void main(java.lang.String[]) -> main
    19:20:float perimeter_polygon(int,float) -> a
    29:30:float perimeter_rectangle(float,float) -> a
    39:40:double circumference(float) -> a
com.thealgorithms.maths.PiNilakantha -> com.a.i.am:
    boolean $assertionsDisabled -> a
    3:3:void <init>() -> <init>
    9:14:void main(java.lang.String[]) -> main
    24:48:double calculatePi(int) -> a
    3:3:void <clinit>() -> <clinit>
com.thealgorithms.maths.Pow -> com.a.i.an:
    boolean $assertionsDisabled -> a
    4:4:void <init>() -> <init>
    7:11:void main(java.lang.String[]) -> main
    22:26:long pow(int,int) -> a
    4:4:void <clinit>() -> <clinit>
com.thealgorithms.maths.PowRecursion -> com.a.i.ao:
    boolean $assertionsDisabled -> a
    3:3:void <init>() -> <init>
    6:10:void main(java.lang.String[]) -> main
    21:21:long pow(int,int) -> a
    3:3:void <clinit>() -> <clinit>
com.thealgorithms.maths.PowerOfTwoOrNot -> com.a.i.ap:
    boolean $assertionsDisabled -> a
    7:7:void <init>() -> <init>
    10:15:void main(java.lang.String[]) -> main
    25:25:boolean checkIfPowerOfTwoOrNot(int) -> a
    7:7:void <clinit>() -> <clinit>
com.thealgorithms.maths.PrimeCheck -> com.a.i.aq:
    5:5:void <init>() -> <init>
    8:28:void main(java.lang.String[]) -> main
    38:49:boolean isPrime(int) -> a
    61:68:boolean fermatPrimeChecking(int,int) -> a
    79:84:long modPow(long,long,long) -> a
com.thealgorithms.maths.PrimeFactorization -> com.a.i.ar:
    12:12:void <init>() -> <init>
    15:36:java.util.List pfactors(int) -> a
com.thealgorithms.maths.PronicNumber -> com.a.i.as:
    13:13:void <init>() -> <init>
    23:32:boolean isPronic(int) -> a
com.thealgorithms.maths.PythagoreanTriple -> com.a.i.at:
    boolean $assertionsDisabled -> a
    6:6:void <init>() -> <init>
    9:15:void main(java.lang.String[]) -> main
    28:31:boolean isPythagTriple(int,int,int) -> a
    6:6:void <clinit>() -> <clinit>
com.thealgorithms.maths.ReverseNumber -> com.a.i.au:
    7:7:void <init>() -> <init>
    11:29:void main(java.lang.String[]) -> main
com.thealgorithms.maths.RomanNumeralUtil -> com.a.i.av:
    int MIN_VALUE -> a
    int MAX_VALUE -> b
    java.lang.String[] RN_M -> c
    java.lang.String[] RN_C -> d
    java.lang.String[] RN_X -> e
    java.lang.String[] RN_I -> f
    11:11:void <init>() -> <init>
    65:75:java.lang.String generate(int) -> a
    16:51:void <clinit>() -> <clinit>
com.thealgorithms.maths.SimpsonIntegration -> com.a.i.aw:
    5:5:void <init>() -> <init>
    19:38:void main(java.lang.String[]) -> main
    51:81:double simpsonsMethod(int,double,double) -> a
    87:87:double f(double) -> a
com.thealgorithms.maths.SquareRootWithBabylonianMethod -> com.a.i.ax:
    3:3:void <init>() -> <init>
    12:19:float square_Root(float) -> a
com.thealgorithms.maths.SquareRootWithNewtonRaphsonMethod -> com.a.i.ay:
    19:19:void <init>() -> <init>
    22:30:double squareRoot(int) -> a
com.thealgorithms.maths.StandardDeviation -> com.a.i.az:
    3:3:void <init>() -> <init>
    6:16:double stdDev(double[]) -> a
com.thealgorithms.maths.StandardScore -> com.a.i.aA:
    3:3:void <init>() -> <init>
    6:7:double zScore(double,double,double) -> a
com.thealgorithms.maths.SumOfArithmeticSeries -> com.a.i.aB:
    boolean $assertionsDisabled -> a
    13:13:void <init>() -> <init>
    17:29:void main(java.lang.String[]) -> main
    44:44:double sumOfSeries(double,double,int) -> a
    13:13:void <clinit>() -> <clinit>
com.thealgorithms.maths.SumOfDigits -> com.a.i.aC:
    boolean $assertionsDisabled -> a
    3:3:void <init>() -> <init>
    6:17:void main(java.lang.String[]) -> main
    26:33:int sumOfDigits(int) -> a
    43:47:int sumOfDigitsRecursion(int) -> b
    57:64:int sumOfDigitsFast(int) -> c
    3:3:void <clinit>() -> <clinit>
com.thealgorithms.maths.SumWithoutArithmeticOperators -> com.a.i.aD:
    3:3:void <init>() -> <init>
    15:18:int getSum(int,int) -> a
com.thealgorithms.maths.TrinomialTriangle -> com.a.i.aE:
    10:10:void <init>() -> <init>
    13:24:int TrinomialValue(int,int) -> a
    29:40:void printTrinomial(int) -> a
    43:45:void main(java.lang.String[]) -> main
com.thealgorithms.maths.TwinPrime -> com.a.i.aF:
    12:12:void <init>() -> <init>
    24:29:int getTwinPrime(int) -> a
com.thealgorithms.maths.VampireNumber -> com.a.i.aG:
    19:19:void <init>() -> <init>
    22:23:void main(java.lang.String[]) -> main
    26:51:void test(int,int) -> a
    61:70:boolean isVampireNumber(int,int,boolean) -> a
    75:91:java.lang.String splitIntoDigits(int,int) -> b
com.thealgorithms.maths.VectorCrossProduct -> com.a.i.aH:
    int x -> a
    int y -> b
    int z -> c
    49:53:void <init>() -> <init>
    62:66:void <init>(int,int,int) -> <init>
    74:74:double magnitude() -> a
    84:84:int dotProduct(com.thealgorithms.maths.VectorCrossProduct) -> a
    94:98:com.thealgorithms.maths.VectorCrossProduct crossProduct(com.thealgorithms.maths.VectorCrossProduct) -> b
    105:106:void displayVector() -> b
    109:110:void main(java.lang.String[]) -> main
    114:124:void test() -> c
com.thealgorithms.maths.Volume -> com.a.i.aI:
    boolean $assertionsDisabled -> a
    4:4:void <init>() -> <init>
    8:30:void main(java.lang.String[]) -> main
    39:39:double volumeCube(double) -> a
    55:55:double volumeCuboid(double,double,double) -> a
    65:65:double volumeSphere(double) -> b
    76:76:double volumeCylinder(double,double) -> a
    86:86:double volumeHemisphere(double) -> c
    97:97:double volumeCone(double,double) -> b
    108:108:double volumePrism(double,double) -> c
    119:119:double volumePyramid(double,double) -> d
    4:4:void <clinit>() -> <clinit>
com.thealgorithms.matrixexponentiation.Fibonacci -> com.a.j.a:
    int[][] fibMatrix -> b
    int[][] identityMatrix -> c
    int[][] baseFibNumbers -> d
    boolean $assertionsDisabled -> a
    10:10:void <init>() -> <init>
    30:53:int[][] matrixMultiplication(int[][],int[][]) -> a
    64:75:int[][] fib(int) -> a
    85:90:void main(java.lang.String[]) -> main
    10:16:void <clinit>() -> <clinit>
com.thealgorithms.minimizinglateness.MinimizingLateness -> com.a.k.a:
    8:8:void <init>() -> <init>
    26:65:void main(java.lang.String[]) -> main
com.thealgorithms.minimizinglateness.MinimizingLateness$Schedule -> com.a.k.b:
    int t -> a
    int d -> b
    int s -> c
    int f -> d
    12:20:void <init>(int,int) -> <init>
com.thealgorithms.misc.ColorContrastRatio -> com.a.l.a:
    boolean $assertionsDisabled -> a
    14:14:void <init>() -> <init>
    23:30:double getContrastRatio(java.awt.Color,java.awt.Color) -> a
    41:45:double getRelativeLuminance(java.awt.Color) -> a
    56:59:double getColor(int) -> a
    69:69:double getColorSRgb(double) -> a
    82:118:void test() -> a
    121:122:void main(java.lang.String[]) -> main
    14:14:void <clinit>() -> <clinit>
com.thealgorithms.misc.InverseOfMatrix -> com.a.l.b:
    13:13:void <init>() -> <init>
    16:37:void main(java.lang.String[]) -> main
    40:71:double[][] invert(double[][]) -> a
    77:125:void gaussian(double[][],int[]) -> a
com.thealgorithms.misc.MedianOfRunningArray -> com.a.l.c:
    java.util.PriorityQueue p1 -> a
    java.util.PriorityQueue p2 -> b
    15:18:void <init>() -> <init>
    25:29:void insert(java.lang.Integer) -> a
    35:38:java.lang.Integer median() -> a
    46:52:void main(java.lang.String[]) -> main
com.thealgorithms.misc.PalindromePrime -> com.a.l.d:
    5:5:void <init>() -> <init>
    8:15:void main(java.lang.String[]) -> main
    18:23:boolean prime(int) -> a
    27:33:int reverse(int) -> b
    37:50:void functioning(int) -> c
com.thealgorithms.misc.PalindromeSinglyLinkedList -> com.a.l.e:
    14:14:void <init>() -> <init>
    17:30:void main(java.lang.String[]) -> main
    33:47:boolean isPalindrome(com.thealgorithms.datastructures.lists.SinglyLinkedList) -> a
com.thealgorithms.misc.RangeInSortedArray -> com.a.l.f:
    boolean $assertionsDisabled -> a
    5:5:void <init>() -> <init>
    9:21:void main(java.lang.String[]) -> main
    26:29:int[] sortedRange(int[],int) -> a
    42:65:void alteredBinSearch(int[],int,int,int,int[],boolean) -> a
    77:101:void alteredBinSearchIter(int[],int,int,int,int[],boolean) -> b
    104:104:int getCountLessThan(int[],int) -> b
    108:118:int getLessThan(int[],int,int,int) -> a
    5:5:void <clinit>() -> <clinit>
com.thealgorithms.misc.Sort012D -> com.a.l.g:
    14:14:void <init>() -> <init>
    17:24:void main(java.lang.String[]) -> main
    27:59:void sort012(int[]) -> a
com.thealgorithms.misc.Sparcity -> com.a.l.h:
    12:12:void <init>() -> <init>
    21:31:double sparcity(double[][]) -> a
    36:50:void main(java.lang.String[]) -> main
com.thealgorithms.misc.ThreeSumProblem -> com.a.l.i:
    5:5:void <init>() -> <init>
    8:26:void main(java.lang.String[]) -> main
    29:47:java.util.List BruteForce(int[],int) -> a
    51:77:java.util.List TwoPointer(int[],int) -> b
    81:101:java.util.List Hashmap(int[],int) -> c
com.thealgorithms.misc.Trie -> com.a.l.j:
    com.thealgorithms.misc.TrieNode root -> a
    char endSymbol -> b
    157:160:void <init>() -> <init>
    163:174:void add(java.lang.String) -> a
com.thealgorithms.misc.TrieNode -> com.a.l.k:
    java.util.Map children -> a
    java.lang.String word -> b
    146:149:void <init>() -> <init>
com.thealgorithms.misc.TwoSumProblem -> com.a.l.l:
    6:6:void <init>() -> <init>
    9:33:void main(java.lang.String[]) -> main
    37:49:int[] BruteForce(int[],int) -> a
    54:88:int[] TwoPointer(int[],int) -> b
    93:107:int[] HashMap(int[],int) -> c
    67:67:java.lang.Integer lambda$TwoPointer$1(java.lang.Integer,java.lang.Integer) -> a
    62:62:int lambda$TwoPointer$0(java.util.Map$Entry,java.util.Map$Entry) -> a
com.thealgorithms.misc.WordBoggle -> com.a.l.m:
    boolean $assertionsDisabled -> a
    5:5:void <init>() -> <init>
    13:24:java.util.List boggleBoard(char[][],java.lang.String[]) -> a
    29:68:void main(java.lang.String[]) -> main
    78:105:void explore(int,int,char[][],com.thealgorithms.misc.TrieNode,boolean[][],java.util.Set) -> a
    108:141:java.util.List getNeighbors(int,int,char[][]) -> a
    5:5:void <clinit>() -> <clinit>
com.thealgorithms.misc.matrixTranspose -> com.a.l.n:
    21:21:void <init>() -> <init>
    31:77:void main(java.lang.String[]) -> main
com.thealgorithms.others.ArrayLeftRotation -> com.a.m.a:
    11:11:void <init>() -> <init>
    23:30:int[] rotateLeft(int[],int) -> a
com.thealgorithms.others.BFPRT -> com.a.m.b:
    8:8:void <init>() -> <init>
    11:25:int[] getMinKNumsByBFPRT(int[],int) -> a
    29:30:int getMinKthByBFPRT(int[],int) -> b
    34:38:int[] copyArray(int[]) -> a
    42:52:int bfprt(int[],int,int,int) -> a
    65:72:int medianOfMedians(int[],int,int) -> a
    76:79:void swap(int[],int,int) -> b
    82:97:int[] partition(int[],int,int,int) -> b
    101:104:int getMedian(int[],int,int) -> c
    108:120:void insertionSort(int[],int,int) -> d
    123:146:void main(java.lang.String[]) -> main
com.thealgorithms.others.BankersAlgorithm -> com.a.m.c:
    23:23:void <init>() -> <init>
    35:40:void calculateNeed(int[][],int[][],int[][],int,int) -> a
    65:130:boolean checkSafeSystem(int[],int[],int[][],int[][],int,int) -> a
    139:194:void main(java.lang.String[]) -> main
com.thealgorithms.others.BestFitCPU -> com.a.m.d:
    int NO_ALLOCATION -> a
    33:33:void <init>() -> <init>
    47:53:int findMaxElement(int[]) -> a
    68:80:int findBestFit(int[],int) -> a
    100:109:java.util.ArrayList fitProcess(int[],int[]) -> a
com.thealgorithms.others.BoyerMoore -> com.a.m.e:
    10:10:void <init>() -> <init>
    13:35:int findmajor(int[]) -> a
    39:46:void main(java.lang.String[]) -> main
com.thealgorithms.others.BrianKernighanAlgorithm -> com.a.m.f:
    23:23:void <init>() -> <init>
    30:35:int countSetBits(int) -> a
    42:47:void main(java.lang.String[]) -> main
com.thealgorithms.others.CRC32 -> com.a.m.g:
    8:8:void <init>() -> <init>
    11:12:void main(java.lang.String[]) -> main
    15:15:int crc32(java.lang.String) -> a
    19:29:int crc32(byte[]) -> a
com.thealgorithms.others.CRCAlgorithm -> com.a.m.h:
    int correctMess -> a
    int wrongMess -> b
    int wrongMessCaught -> c
    int wrongMessNotCaught -> d
    int messSize -> e
    double ber -> f
    boolean messageChanged -> g
    java.util.ArrayList message -> h
    java.util.ArrayList dividedMessage -> i
    java.util.ArrayList p -> j
    java.util.Random randomGenerator -> k
    43:58:void <init>(java.lang.String,int,double) -> <init>
    66:66:int getWrongMess() -> a
    76:76:int getWrongMessCaught() -> b
    86:86:int getWrongMessNotCaught() -> c
    95:95:int getCorrectMess() -> d
    104:107:void refactor() -> e
    114:118:void generateRandomMess() -> f
    134:173:void divideMessageWithP(boolean) -> a
    185:202:void changeMess() -> g
com.thealgorithms.others.CountChar -> com.a.m.i:
    3:3:void <init>() -> <init>
    13:13:int CountCharacters(java.lang.String) -> a
com.thealgorithms.others.CountWords -> com.a.m.j:
    11:11:void <init>() -> <init>
    14:23:void main(java.lang.String[]) -> main
    26:29:int wordCount(java.lang.String) -> a
    41:51:int secondaryWordCount(java.lang.String) -> b
com.thealgorithms.others.Dijkstra -> com.a.m.k:
    com.thealgorithms.others.Graph$Edge[] GRAPH -> a
    java.lang.String START -> b
    java.lang.String END -> c
    20:20:void <init>() -> <init>
    43:47:void main(java.lang.String[]) -> main
    22:22:void <clinit>() -> <clinit>
com.thealgorithms.others.EulersFunction -> com.a.m.l:
    9:9:void <init>() -> <init>
    15:27:int getEuler(int) -> a
    31:34:void main(java.lang.String[]) -> main
com.thealgorithms.others.FibbonaciSeries -> com.a.m.m:
    18:18:void <init>() -> <init>
    22:33:void main(java.lang.String[]) -> main
com.thealgorithms.others.FirstFitCPU -> com.a.m.n:
    int NO_ALLOCATION -> a
    180:180:void <init>() -> <init>
    196:202:int findFirstFit(int[],int) -> a
    222:231:java.util.ArrayList fitProcess(int[],int[]) -> a
com.thealgorithms.others.FloydTriangle -> com.a.m.o:
    5:5:void <init>() -> <init>
    8:20:void main(java.lang.String[]) -> main
com.thealgorithms.others.Graph -> com.a.m.p:
    java.util.Map graph -> a
    165:184:void <init>(com.thealgorithms.others.Graph$Edge[]) -> <init>
    190:208:void dijkstra(java.lang.String) -> a
    215:234:void dijkstra(java.util.NavigableSet) -> a
    240:250:void printPath(java.lang.String) -> b
    257:261:void printAllPaths() -> a
com.thealgorithms.others.Graph$Edge -> com.a.m.q:
    java.lang.String v1 -> a
    java.lang.String v2 -> b
    int dist -> c
    64:68:void <init>(java.lang.String,java.lang.String,int) -> <init>
com.thealgorithms.others.Graph$Vertex -> com.a.m.r:
    java.lang.String name -> a
    int dist -> b
    com.thealgorithms.others.Graph$Vertex previous -> c
    java.util.Map neighbours -> d
    78:84:void <init>(java.lang.String) -> <init>
    87:95:void printPath() -> a
    98:102:int compareTo(com.thealgorithms.others.Graph$Vertex) -> a
    107:142:boolean equals(java.lang.Object) -> equals
    147:153:int hashCode() -> hashCode
    158:158:java.lang.String toString() -> toString
    74:74:int compareTo(java.lang.Object) -> compareTo
    74:74:void access$000(com.thealgorithms.others.Graph$Vertex) -> b
com.thealgorithms.others.GuassLegendre -> com.a.m.s:
    9:9:void <init>() -> <init>
    12:15:void main(java.lang.String[]) -> main
    22:31:double pi(int) -> a
    35:41:double[] update(double,double,double,double) -> a
com.thealgorithms.others.HappyNumbersSeq -> com.a.m.t:
    java.util.Set CYCLE_NUMS -> a
    8:8:void <init>() -> <init>
    15:24:void main(java.lang.String[]) -> main
    27:32:int sumSquares(int) -> a
    36:36:boolean isSad(int) -> b
    10:11:void <clinit>() -> <clinit>
com.thealgorithms.others.Huffman -> com.a.m.u:
    29:29:void <init>() -> <init>
    38:55:void printCode(com.thealgorithms.others.HuffmanNode,java.lang.String) -> a
    59:128:void main(java.lang.String[]) -> main
com.thealgorithms.others.HuffmanNode -> com.a.m.v:
    int data -> a
    char c -> b
    com.thealgorithms.others.HuffmanNode left -> c
    com.thealgorithms.others.HuffmanNode right -> d
    9:9:void <init>() -> <init>
com.thealgorithms.others.InsertDeleteInArray -> com.a.m.w:
    5:5:void <init>() -> <init>
    8:51:void main(java.lang.String[]) -> main
com.thealgorithms.others.KMP -> com.a.m.x:
    7:7:void <init>() -> <init>
    12:15:void main(java.lang.String[]) -> main
    19:37:void KMPmatcher(java.lang.String,java.lang.String) -> a
    41:56:int[] computePrefixFunction(java.lang.String) -> a
com.thealgorithms.others.KochSnowflake -> com.a.m.y:
    boolean $assertionsDisabled -> a
    25:25:void <init>() -> <init>
    29:68:void main(java.lang.String[]) -> main
    84:89:java.util.ArrayList Iterate(java.util.ArrayList,int) -> a
    100:120:java.awt.image.BufferedImage GetKochSnowflake(int,int) -> a
    136:154:java.util.ArrayList IterationStep(java.util.ArrayList) -> a
    170:194:java.awt.image.BufferedImage GetImage(java.util.ArrayList,int,int) -> a
    25:25:void <clinit>() -> <clinit>
com.thealgorithms.others.KochSnowflake$Vector2 -> com.a.m.z:
    double x -> a
    double y -> b
    204:207:void <init>(double,double) -> <init>
    211:211:java.lang.String toString() -> toString
    221:223:com.thealgorithms.others.KochSnowflake$Vector2 add(com.thealgorithms.others.KochSnowflake$Vector2) -> a
    233:235:com.thealgorithms.others.KochSnowflake$Vector2 subtract(com.thealgorithms.others.KochSnowflake$Vector2) -> b
    245:247:com.thealgorithms.others.KochSnowflake$Vector2 multiply(double) -> a
    257:262:com.thealgorithms.others.KochSnowflake$Vector2 rotate(double) -> b
com.thealgorithms.others.Krishnamurthy -> com.a.m.A:
    5:5:void <init>() -> <init>
    8:12:int fact(int) -> a
    16:32:void main(java.lang.String[]) -> main
com.thealgorithms.others.LinearCongruentialGenerator -> com.a.m.B:
    double a -> a
    double c -> b
    double m -> c
    double previousValue -> d
    29:30:void <init>(double,double,double) -> <init>
    47:52:void <init>(double,double,double,double) -> <init>
    61:62:double nextNumber() -> a
    69:77:void main(java.lang.String[]) -> main
com.thealgorithms.others.LowestBasePalindrome -> com.a.m.C:
    17:17:void <init>() -> <init>
    20:39:void main(java.lang.String[]) -> main
    50:97:int lowestBasePalindrome(int) -> a
    101:105:java.lang.String reverse(java.lang.String) -> a
    112:151:java.lang.String base2base(java.lang.String,int,int) -> a
com.thealgorithms.others.Mandelbrot -> com.a.m.D:
    boolean $assertionsDisabled -> a
    26:26:void <init>() -> <init>
    30:63:void main(java.lang.String[]) -> main
    92:143:java.awt.image.BufferedImage getImage(int,int,double,double,double,int,boolean) -> a
    154:154:java.awt.Color blackAndWhiteColorMap(double) -> a
    165:193:java.awt.Color colorCodedColorMap(double) -> b
    213:228:double getDistance(double,double,int) -> a
    26:26:void <clinit>() -> <clinit>
com.thealgorithms.others.MemoryManagementAlgorithms -> com.a.m.E:
    9:9:void <init>() -> <init>
    java.util.ArrayList fitProcess(int[],int[]) -> a
com.thealgorithms.others.MiniMaxAlgorithm -> com.a.m.F:
    int[] scores -> a
    int height -> b
    27:30:void <init>() -> <init>
    33:51:void main(java.lang.String[]) -> main
    70:102:int miniMax(int,boolean,int,boolean) -> a
    113:120:int[] getRandomScores(int,int) -> a
    125:125:int log2(int) -> a
    129:135:void setScores(int[]) -> a
    138:138:int[] getScores() -> a
    142:142:int getHeight() -> b
com.thealgorithms.others.MyComparator -> com.a.m.G:
    22:22:void <init>() -> <init>
    25:25:int compare(com.thealgorithms.others.HuffmanNode,com.thealgorithms.others.HuffmanNode) -> a
    22:22:int compare(java.lang.Object,java.lang.Object) -> compare
com.thealgorithms.others.NextFit -> com.a.m.H:
    int NO_ALLOCATION -> a
    int counter -> b
    238:242:void <init>() -> <init>
    255:266:int findNextFit(int[],int) -> a
    286:295:java.util.ArrayList fitProcess(int[],int[]) -> a
com.thealgorithms.others.PageRank -> com.a.m.I:
    int[][] path -> a
    double[] pagerank -> b
    5:28:void <init>() -> <init>
    9:25:void main(java.lang.String[]) -> main
    32:123:void calc(double) -> a
com.thealgorithms.others.PasswordGen -> com.a.m.J:
    14:14:void <init>() -> <init>
    17:19:void main(java.lang.String[]) -> main
    22:49:java.lang.String generatePassword(int,int) -> a
com.thealgorithms.others.PerlinNoise -> com.a.m.K:
    10:10:void <init>() -> <init>
    27:69:float[][] generatePerlinNoise(int,int,int,float,long) -> a
    85:123:float[][] generatePerlinNoiseLayer(float[][],int,int,int) -> a
    134:134:float interpolate(float,float,float) -> a
    138:190:void main(java.lang.String[]) -> main
com.thealgorithms.others.Process -> com.a.m.L:
    int pid -> a
    int arrivalTime -> b
    int burstTime -> c
    int priority -> d
    int turnAroundTime -> e
    int waitTime -> f
    int remainingTime -> g
    24:24:void <init>() -> <init>
com.thealgorithms.others.QueueUsingTwoStacks -> com.a.m.M:
    115:115:void <init>() -> <init>
    123:174:void main(java.lang.String[]) -> main
com.thealgorithms.others.QueueWithStack -> com.a.m.N:
    java.util.Stack inStack -> a
    java.util.Stack outStack -> b
    28:31:void <init>() -> <init>
    40:41:void insert(java.lang.Object) -> a
    49:55:java.lang.Object remove() -> a
    64:70:java.lang.Object peekFront() -> b
    79:79:java.lang.Object peekBack() -> c
    88:88:boolean isEmpty() -> d
    97:97:boolean isInStackEmpty() -> e
    106:106:boolean isOutStackEmpty() -> f
com.thealgorithms.others.RabinKarp -> com.a.m.O:
    java.util.Scanner scanner -> a
    int d -> b
    10:10:void <init>() -> <init>
    16:24:void main(java.lang.String[]) -> main
    27:81:void searchPat(java.lang.String,java.lang.String,int) -> a
    12:12:void <clinit>() -> <clinit>
com.thealgorithms.others.RemoveDuplicateFromString -> com.a.m.P:
    9:9:void <init>() -> <init>
    12:23:void main(java.lang.String[]) -> main
    34:47:java.lang.String removeDuplicate(java.lang.String) -> a
com.thealgorithms.others.ReturnSubsequence -> com.a.m.Q:
    5:5:void <init>() -> <init>
    8:18:void main(java.lang.String[]) -> main
    25:44:java.lang.String[] returnSubsequence(java.lang.String) -> a
com.thealgorithms.others.ReverseStackUsingRecursion -> com.a.m.R:
    java.util.Stack stack -> a
    6:6:void <init>() -> <init>
    14:32:void main(java.lang.String[]) -> main
    36:45:void reverseUsingRecursion(java.util.Stack) -> a
    49:60:void insertAtEnd(int) -> a
    9:9:void <clinit>() -> <clinit>
com.thealgorithms.others.RootPrecision -> com.a.m.S:
    5:5:void <init>() -> <init>
    9:19:void main(java.lang.String[]) -> main
    25:34:double squareRoot(int,int) -> a
com.thealgorithms.others.Rotate -> com.a.m.T:
    45:45:void <init>() -> <init>
    48:69:void rotate(int[][]) -> a
com.thealgorithms.others.Rotate_by_90_degree -> com.a.m.U:
    9:9:void <init>() -> <init>
    12:30:void main(java.lang.String[]) -> main
    33:39:void printMatrix(int[][]) -> a
com.thealgorithms.others.SJF -> com.a.m.V:
    192:192:void <init>() -> <init>
    195:198:void main(java.lang.String[]) -> main
com.thealgorithms.others.Schedule -> com.a.m.W:
    int noOfProcess -> a
    int timer -> b
    java.util.ArrayList processes -> c
    java.util.ArrayList remainingProcess -> d
    java.util.ArrayList gantChart -> e
    float burstAll -> f
    java.util.Map arrivals -> g
    38:77:void <init>() -> <init>
    80:121:void startScheduling() -> a
    124:137:void removeFinishedProcess() -> b
    140:145:int timeElapsed(int) -> a
    149:155:void ageing(int) -> b
    158:189:void solve() -> c
com.thealgorithms.others.Schedule$1 -> com.a.m.W$1:
    com.thealgorithms.others.Schedule this$0 -> a
    81:81:void <init>(com.thealgorithms.others.Schedule) -> <init>
    84:84:int compare(com.thealgorithms.others.Process,com.thealgorithms.others.Process) -> a
    81:81:int compare(java.lang.Object,java.lang.Object) -> compare
com.thealgorithms.others.Schedule$2 -> com.a.m.W$2:
    int alpha -> b
    int beta -> c
    com.thealgorithms.others.Schedule this$0 -> a
    97:99:void <init>(com.thealgorithms.others.Schedule) -> <init>
    103:107:int compare(com.thealgorithms.others.Process,com.thealgorithms.others.Process) -> a
    97:97:int compare(java.lang.Object,java.lang.Object) -> compare
com.thealgorithms.others.SieveOfEratosthenes -> com.a.m.X:
    28:28:void <init>() -> <init>
    38:68:int[] findPrimesTill(int) -> a
    77:81:void main(java.lang.String[]) -> main
    57:57:boolean lambda$findPrimesTill$0(com.thealgorithms.others.SieveOfEratosthenes$Type) -> a
com.thealgorithms.others.SieveOfEratosthenes$Type -> com.a.m.Y:
    com.thealgorithms.others.SieveOfEratosthenes$Type PRIME -> a
    com.thealgorithms.others.SieveOfEratosthenes$Type NOT_PRIME -> b
    com.thealgorithms.others.SieveOfEratosthenes$Type[] $VALUES -> c
    71:71:com.thealgorithms.others.SieveOfEratosthenes$Type[] values() -> a
    71:71:com.thealgorithms.others.SieveOfEratosthenes$Type valueOf(java.lang.String) -> a
    71:71:void <init>(java.lang.String,int) -> <init>
    71:73:void <clinit>() -> <clinit>
com.thealgorithms.others.SkylineProblem -> com.a.m.Z:
    com.thealgorithms.others.SkylineProblem$Building[] building -> a
    int count -> b
    7:7:void <init>() -> <init>
    13:30:void run() -> a
    33:34:void add(int,int,int) -> a
    37:46:void print(java.util.ArrayList) -> a
    49:62:java.util.ArrayList findSkyline(int,int) -> a
    69:115:java.util.ArrayList mergeSkyline(java.util.ArrayList,java.util.ArrayList) -> a
    143:145:void main(java.lang.String[]) -> main
com.thealgorithms.others.SkylineProblem$Building -> com.a.m.aa:
    int left -> a
    int height -> b
    int right -> c
    com.thealgorithms.others.SkylineProblem this$0 -> d
    135:139:void <init>(com.thealgorithms.others.SkylineProblem,int,int,int) -> <init>
com.thealgorithms.others.SkylineProblem$Skyline -> com.a.m.ab:
    int coordinates -> a
    int height -> b
    com.thealgorithms.others.SkylineProblem this$0 -> c
    123:126:void <init>(com.thealgorithms.others.SkylineProblem,int,int) -> <init>
com.thealgorithms.others.StackPostfixNotation -> com.a.m.ac:
    5:5:void <init>() -> <init>
    8:12:void main(java.lang.String[]) -> main
    16:40:int postfixEvaluate(java.lang.String) -> a
com.thealgorithms.others.StringMatchFiniteAutomata -> com.a.m.ad:
    int CHARS -> a
    int[][] FA -> b
    java.util.Scanner scanner -> c
    9:9:void <init>() -> <init>
    16:25:void main(java.lang.String[]) -> main
    28:43:void searchPat(java.lang.String,java.lang.String) -> a
    47:52:void computeFA(java.lang.String,int,int[][]) -> a
    58:76:int getNextState(java.lang.String,int,int,int) -> a
    13:13:void <clinit>() -> <clinit>
com.thealgorithms.others.Sudoku -> com.a.m.ae:
    3:3:void <init>() -> <init>
    7:42:boolean isSafe(int[][],int,int,int) -> a
    46:84:boolean solveSudoku(int[][],int) -> a
    89:100:void print(int[][],int) -> b
    104:123:void main(java.lang.String[]) -> main
com.thealgorithms.others.ThreeSum -> com.a.m.af:
    19:19:void <init>() -> <init>
    22:52:void main(java.lang.String[]) -> main
com.thealgorithms.others.TopKWords -> com.a.m.ag:
    8:8:void <init>() -> <init>
    66:88:void main(java.lang.String[]) -> main
    75:75:java.lang.Integer lambda$main$0(java.util.Map$Entry) -> a
com.thealgorithms.others.TopKWords$CountWords -> com.a.m.ah:
    java.lang.String fileName -> a
    14:16:void <init>(java.lang.String) -> <init>
    19:60:java.util.Map getDictionary() -> a
com.thealgorithms.others.TowerOfHanoi -> com.a.m.ai:
    5:5:void <init>() -> <init>
    14:23:void shift(int,java.lang.String,java.lang.String,java.lang.String) -> a
    26:31:void main(java.lang.String[]) -> main
com.thealgorithms.others.Trieac -> com.a.m.aj:
    int ALPHABET_SIZE -> a
    5:5:void <init>() -> <init>
    22:29:com.thealgorithms.others.Trieac$TrieNode getNode() -> a
    35:47:void insert(com.thealgorithms.others.Trieac$TrieNode,java.lang.String) -> a
    51:62:boolean search(com.thealgorithms.others.Trieac$TrieNode,java.lang.String) -> b
    68:73:boolean isLastNode(com.thealgorithms.others.Trieac$TrieNode) -> a
    80:98:void suggestionsRec(com.thealgorithms.others.Trieac$TrieNode,java.lang.String) -> c
    103:145:int printAutoSuggestions(com.thealgorithms.others.Trieac$TrieNode,java.lang.String) -> d
    150:169:void main(java.lang.String[]) -> main
com.thealgorithms.others.Trieac$TrieNode -> com.a.m.ak:
    com.thealgorithms.others.Trieac$TrieNode[] children -> a
    boolean isWordEnd -> b
    11:13:void <init>() -> <init>
com.thealgorithms.others.TwoPointers -> com.a.m.al:
    boolean $assertionsDisabled -> a
    12:12:void <init>() -> <init>
    15:27:void main(java.lang.String[]) -> main
    40:55:boolean isPairedSum(int[],int) -> a
    12:12:void <clinit>() -> <clinit>
com.thealgorithms.others.WorstFitCPU -> com.a.m.am:
    int NO_ALLOCATION -> a
    116:116:void <init>() -> <init>
    132:144:int findWorstFit(int[],int) -> a
    164:173:java.util.ArrayList fitProcess(int[],int[]) -> a
com.thealgorithms.others.cn.HammingDistance -> com.a.m.a.a:
    6:6:void <init>() -> <init>
    12:37:int getHammingDistanceBetweenBits(java.lang.String,java.lang.String) -> a
com.thealgorithms.others.countSetBits -> com.a.m.an:
    3:3:void <init>() -> <init>
    40:45:long countsetBits(long) -> a
com.thealgorithms.scheduling.FCFSScheduling -> com.a.n.a:
    java.util.List processes -> a
    14:16:void <init>(java.util.List) -> <init>
    19:21:void scheduleProcesses() -> a
    24:40:void evaluateWaitingTime() -> b
    43:46:void evaluateTurnAroundTime() -> c
com.thealgorithms.searches.BinarySearch -> com.a.o.a:
    24:24:void <init>() -> <init>
    34:34:int find(java.lang.Comparable[],java.lang.Comparable) -> a
    52:64:int search(java.lang.Comparable[],java.lang.Comparable,int,int) -> a
    71:107:void main(java.lang.String[]) -> main
    81:81:java.lang.Integer[] lambda$main$1(int) -> a
    77:77:int lambda$main$0(java.util.Random,int) -> a
com.thealgorithms.searches.BinarySearch2dArray -> com.a.o.b:
    10:10:void <init>() -> <init>
    13:59:int[] BinarySearch(int[][],int) -> a
    75:85:int[] binarySearch(int[][],int,int,int,int) -> a
com.thealgorithms.searches.ExponentialSearch -> com.a.o.c:
    11:11:void <init>() -> <init>
    14:50:void main(java.lang.String[]) -> main
    54:70:int find(java.lang.Comparable[],java.lang.Comparable) -> a
    24:24:java.lang.Integer[] lambda$main$1(int) -> a
    20:20:int lambda$main$0(java.util.Random,int) -> a
com.thealgorithms.searches.FibonacciSearch -> com.a.o.d:
    13:13:void <init>() -> <init>
    23:57:int find(java.lang.Comparable[],java.lang.Comparable) -> a
    62:79:void main(java.lang.String[]) -> main
com.thealgorithms.searches.HowManyTimesRotated -> com.a.o.e:
    26:26:void <init>() -> <init>
    29:40:void main(java.lang.String[]) -> main
    43:59:int rotated(int[]) -> a
com.thealgorithms.searches.InterpolationSearch -> com.a.o.f:
    19:19:void <init>() -> <init>
    28:55:int find(int[],int) -> a
    60:93:void main(java.lang.String[]) -> main
    64:64:int lambda$main$0(java.util.Random,int) -> a
com.thealgorithms.searches.IterativeBinarySearch -> com.a.o.g:
    26:26:void <init>() -> <init>
    39:55:int find(java.lang.Comparable[],java.lang.Comparable) -> a
    60:93:void main(java.lang.String[]) -> main
    67:67:java.lang.Integer[] lambda$main$1(int) -> a
    64:64:java.lang.Integer lambda$main$0(java.util.Random,int) -> a
com.thealgorithms.searches.IterativeTernarySearch -> com.a.o.h:
    26:26:void <init>() -> <init>
    30:53:int find(java.lang.Comparable[],java.lang.Comparable) -> a
    58:91:void main(java.lang.String[]) -> main
    65:65:java.lang.Integer[] lambda$main$1(int) -> a
    62:62:java.lang.Integer lambda$main$0(java.util.Random,int) -> a
com.thealgorithms.searches.JumpSearch -> com.a.o.i:
    boolean $assertionsDisabled -> a
    5:5:void <init>() -> <init>
    8:15:void main(java.lang.String[]) -> main
    26:42:int find(java.lang.Comparable[],java.lang.Comparable) -> a
    5:5:void <clinit>() -> <clinit>
com.thealgorithms.searches.KMPSearch -> com.a.o.j:
    3:3:void <init>() -> <init>
    6:38:int KMPSearch(java.lang.String,java.lang.String) -> a
    43:67:void computeLPSArray(java.lang.String,int,int[]) -> a
com.thealgorithms.searches.LinearSearch -> com.a.o.k:
    21:21:void <init>() -> <init>
    32:37:int find(java.lang.Comparable[],java.lang.Comparable) -> a
    42:65:void main(java.lang.String[]) -> main
    48:48:java.lang.Integer[] lambda$main$1(int) -> a
    46:46:java.lang.Integer lambda$main$0(java.util.Random,int) -> a
com.thealgorithms.searches.LinearSearchThread -> com.a.o.l:
    5:5:void <init>() -> <init>
    8:36:void main(java.lang.String[]) -> main
com.thealgorithms.searches.LowerBound -> com.a.o.m:
    28:28:void <init>() -> <init>
    33:69:void main(java.lang.String[]) -> main
    79:79:int find(java.lang.Comparable[],java.lang.Comparable) -> a
    97:112:int search(java.lang.Comparable[],java.lang.Comparable,int,int) -> a
    43:43:java.lang.Integer[] lambda$main$1(int) -> a
    39:39:int lambda$main$0(java.util.Random,int) -> a
com.thealgorithms.searches.MonteCarloTreeSearch -> com.a.o.n:
    int WIN_SCORE -> a
    int TIME_LIMIT -> b
    15:15:void <init>() -> <init>
    42:45:void main(java.lang.String[]) -> main
    59:85:com.thealgorithms.searches.MonteCarloTreeSearch$Node monteCarloTreeSearch(com.thealgorithms.searches.MonteCarloTreeSearch$Node) -> a
    89:92:void addChildNodes(com.thealgorithms.searches.MonteCarloTreeSearch$Node,int) -> a
    103:140:com.thealgorithms.searches.MonteCarloTreeSearch$Node getPromisingNode(com.thealgorithms.searches.MonteCarloTreeSearch$Node) -> b
    150:177:void simulateRandomPlay(com.thealgorithms.searches.MonteCarloTreeSearch$Node) -> c
    180:182:com.thealgorithms.searches.MonteCarloTreeSearch$Node getWinnerNode(com.thealgorithms.searches.MonteCarloTreeSearch$Node) -> d
    187:199:void printScores(com.thealgorithms.searches.MonteCarloTreeSearch$Node) -> e
    182:182:java.lang.Integer lambda$getWinnerNode$0(com.thealgorithms.searches.MonteCarloTreeSearch$Node) -> f
com.thealgorithms.searches.MonteCarloTreeSearch$Node -> com.a.o.o:
    com.thealgorithms.searches.MonteCarloTreeSearch$Node parent -> a
    java.util.ArrayList childNodes -> b
    boolean isPlayersTurn -> c
    boolean playerWon -> d
    int score -> e
    int visitCount -> f
    com.thealgorithms.searches.MonteCarloTreeSearch this$0 -> g
    26:26:void <init>(com.thealgorithms.searches.MonteCarloTreeSearch) -> <init>
    28:35:void <init>(com.thealgorithms.searches.MonteCarloTreeSearch,com.thealgorithms.searches.MonteCarloTreeSearch$Node,boolean) -> <init>
com.thealgorithms.searches.PerfectBinarySearch -> com.a.o.p:
    boolean $assertionsDisabled -> a
    3:3:void <init>() -> <init>
    6:20:int binarySearch(int[],int) -> a
    24:28:void main(java.lang.String[]) -> main
    3:3:void <clinit>() -> <clinit>
com.thealgorithms.searches.QuickSelect -> com.a.o.q:
    9:9:void <init>() -> <init>
    27:45:java.lang.Comparable select(java.util.List,int) -> a
    52:52:int selectIndex(java.util.List,int) -> b
    62:72:int selectIndex(java.util.List,int,int,int) -> a
    82:104:int partition(java.util.List,int,int,int,int) -> a
    112:128:int pivot(java.util.List,int,int) -> a
    136:138:int partition5(java.util.List,int,int) -> b
com.thealgorithms.searches.RabinKarpAlgorithm -> com.a.o.r:
    int d -> a
    6:6:void <init>() -> <init>
    16:63:int search(java.lang.String,java.lang.String,int) -> a
com.thealgorithms.searches.RowColumnWiseSorted2dArrayBinarySearch -> com.a.o.s:
    21:21:void <init>() -> <init>
    26:26:int[] find(java.lang.Comparable[][],java.lang.Comparable) -> a
    30:44:int[] search(java.lang.Comparable[][],java.lang.Comparable) -> b
com.thealgorithms.searches.SaddlebackSearch -> com.a.o.t:
    19:19:void <init>() -> <init>
    33:46:int[] find(int[][],int,int,int) -> a
    56:70:void main(java.lang.String[]) -> main
com.thealgorithms.searches.Searcher -> com.a.o.u:
    int[] arr -> a
    int left -> b
    int right -> c
    int x -> d
    boolean found -> e
    46:51:void <init>(int[],int,int,int) -> <init>
    55:62:void run() -> run
    65:65:boolean getResult() -> a
com.thealgorithms.searches.SquareRootBinarySearch -> com.a.o.v:
    17:17:void <init>() -> <init>
    25:32:void main(java.lang.String[]) -> main
    43:60:long squareRoot(long) -> a
com.thealgorithms.searches.TernarySearch -> com.a.o.w:
    25:25:void <init>() -> <init>
    34:34:int find(java.lang.Comparable[],java.lang.Comparable) -> a
    50:71:int ternarySearch(java.lang.Comparable[],java.lang.Comparable,int,int) -> a
    77:110:void main(java.lang.String[]) -> main
    84:84:java.lang.Integer[] lambda$main$1(int) -> a
    81:81:java.lang.Integer lambda$main$0(java.util.Random,int) -> a
com.thealgorithms.searches.UnionFind -> com.a.o.x:
    int[] p -> a
    int[] r -> b
    10:17:void <init>(int) -> <init>
    20:26:int find(int) -> a
    30:45:void union(int,int) -> a
    48:54:int count() -> a
    58:58:java.lang.String toString() -> toString
    63:89:void main(java.lang.String[]) -> main
com.thealgorithms.searches.UpperBound -> com.a.o.y:
    28:28:void <init>() -> <init>
    33:69:void main(java.lang.String[]) -> main
    79:79:int find(java.lang.Comparable[],java.lang.Comparable) -> a
    97:110:int search(java.lang.Comparable[],java.lang.Comparable,int,int) -> a
    43:43:java.lang.Integer[] lambda$main$1(int) -> a
    39:39:int lambda$main$0(java.util.Random,int) -> a
com.thealgorithms.sorts.App -> com.a.p.a:
    75:75:void <init>() -> <init>
    78:82:void main(java.lang.String[]) -> main
com.thealgorithms.sorts.BinaryInsertionSort -> com.a.p.b:
    3:3:void <init>() -> <init>
    7:27:int[] binaryInsertSort(int[]) -> a
com.thealgorithms.sorts.BitonicSort -> com.a.p.c:
    5:5:void <init>() -> <init>
    12:18:void compAndSwap(int[],int,int,int) -> a
    26:34:void bitonicMerge(int[],int,int,int) -> b
    41:54:void bitonicSort(int[],int,int,int) -> c
    59:60:void sort(int[],int,int) -> a
    64:69:void printArray(int[]) -> a
    72:78:void main(java.lang.String[]) -> main
com.thealgorithms.sorts.BogoSort -> com.a.p.d:
    java.util.Random random -> a
    9:9:void <init>() -> <init>
    14:19:boolean isSorted(java.lang.Comparable[]) -> b
    24:30:void nextPermutation(java.lang.Object[]) -> a
    33:36:java.lang.Comparable[] sort(java.lang.Comparable[]) -> a
    42:53:void main(java.lang.String[]) -> main
    11:11:void <clinit>() -> <clinit>
com.thealgorithms.sorts.BubbleSort -> com.a.p.e:
    10:10:void <init>() -> <init>
    21:33:java.lang.Comparable[] sort(java.lang.Comparable[]) -> a
com.thealgorithms.sorts.BubbleSortRecursion -> com.a.p.f:
    boolean $assertionsDisabled -> a
    8:8:void <init>() -> <init>
    11:26:void main(java.lang.String[]) -> main
    34:35:java.lang.Comparable[] sort(java.lang.Comparable[]) -> a
    48:59:void bubbleSort(java.lang.Comparable[],int) -> a
    8:8:void <clinit>() -> <clinit>
com.thealgorithms.sorts.BucketSort -> com.a.p.g:
    boolean $assertionsDisabled -> a
    11:11:void <init>() -> <init>
    14:28:void main(java.lang.String[]) -> main
    37:70:void bucketSort(int[]) -> c
    81:81:int hash(int,int,int) -> a
    91:97:int max(int[]) -> a
    107:113:int min(int[]) -> b
    11:11:void <clinit>() -> <clinit>
com.thealgorithms.sorts.CircleSort -> com.a.p.h:
    boolean $assertionsDisabled -> a
    5:5:void <init>() -> <init>
    12:14:java.lang.Comparable[] sort(java.lang.Comparable[]) -> a
    27:54:java.lang.Boolean doSort(java.lang.Comparable[],int,int) -> a
    59:72:void main(java.lang.String[]) -> main
    5:5:void <clinit>() -> <clinit>
com.thealgorithms.sorts.CocktailShakerSort -> com.a.p.i:
    7:7:void <init>() -> <init>
    16:40:java.lang.Comparable[] sort(java.lang.Comparable[]) -> a
    46:55:void main(java.lang.String[]) -> main
com.thealgorithms.sorts.CombSort -> com.a.p.j:
    20:20:void <init>() -> <init>
    25:26:int nextGap(int) -> a
    37:61:java.lang.Comparable[] sort(java.lang.Comparable[]) -> a
    66:91:void main(java.lang.String[]) -> main
com.thealgorithms.sorts.CountingSort -> com.a.p.k:
    15:15:void <init>() -> <init>
    19:19:java.lang.Comparable[] sort(java.lang.Comparable[]) -> a
    32:46:java.util.List sort(java.util.List) -> a
    56:66:java.util.List streamSort(java.util.List) -> b
    72:102:void main(java.lang.String[]) -> main
    62:64:java.util.stream.Stream lambda$streamSort$5(java.util.Map$Entry) -> a
    64:64:java.lang.Comparable lambda$null$4(java.util.Map$Entry,int) -> a
    58:58:java.lang.Integer lambda$streamSort$3(java.lang.Integer,java.lang.Integer) -> a
    58:58:java.lang.Integer lambda$streamSort$2(java.lang.Comparable) -> a
    58:58:java.lang.Comparable lambda$streamSort$1(java.lang.Comparable) -> b
    37:37:void lambda$sort$0(java.util.Map,java.lang.Comparable) -> a
com.thealgorithms.sorts.CycleSort -> com.a.p.l:
    9:9:void <init>() -> <init>
    13:66:java.lang.Comparable[] sort(java.lang.Comparable[]) -> a
    70:73:java.lang.Comparable replace(java.lang.Comparable[],int,java.lang.Comparable) -> a
    77:99:void main(java.lang.String[]) -> main
com.thealgorithms.sorts.DNFSort -> com.a.p.m:
    3:3:void <init>() -> <init>
    8:35:void sort012(int[],int) -> a
    39:43:void printArray(int[],int) -> b
    47:52:void main(java.lang.String[]) -> main
com.thealgorithms.sorts.DualPivotQuickSort -> com.a.p.n:
    9:9:void <init>() -> <init>
    18:19:java.lang.Comparable[] sort(java.lang.Comparable[]) -> a
    30:37:void dualPivotQuicksort(java.lang.Comparable[],int,int) -> a
    47:84:int[] partition(java.lang.Comparable[],int,int) -> b
    88:91:void swap(java.lang.Comparable[],int,int) -> c
    99:105:void main(java.lang.String[]) -> main
com.thealgorithms.sorts.DutchNationalFlagSort -> com.a.p.o:
    14:14:void <init>() -> <init>
    18:20:java.lang.Comparable[] sort(java.lang.Comparable[]) -> a
    25:25:java.lang.Comparable[] sort(java.lang.Comparable[],java.lang.Comparable) -> a
    32:48:java.lang.Comparable[] dutch_national_flag_sort(java.lang.Comparable[],java.lang.Comparable) -> b
com.thealgorithms.sorts.GnomeSort -> com.a.p.p:
    11:11:void <init>() -> <init>
    15:28:java.lang.Comparable[] sort(java.lang.Comparable[]) -> a
    32:72:void main(java.lang.String[]) -> main
com.thealgorithms.sorts.HeapSort -> com.a.p.q:
    14:14:void <init>() -> <init>
    94:94:java.lang.Comparable[] sort(java.lang.Comparable[]) -> a
    99:113:java.util.List sort(java.util.List) -> a
    122:125:void main(java.lang.String[]) -> main
com.thealgorithms.sorts.HeapSort$Heap -> com.a.p.r:
    java.lang.Comparable[] heap -> a
    28:30:void <init>(java.lang.Comparable[]) -> <init>
    39:59:void heapSubtree(int,int) -> a
    67:78:void makeMinHeap(int) -> a
    86:88:java.lang.Comparable getRoot(int) -> b
    16:16:void access$000(com.thealgorithms.sorts.HeapSort$Heap,int) -> a
    16:16:java.lang.Comparable access$100(com.thealgorithms.sorts.HeapSort$Heap,int) -> b
com.thealgorithms.sorts.InsertionSort -> com.a.p.s:
    6:6:void <init>() -> <init>
    17:27:java.lang.Comparable[] sort(java.lang.Comparable[]) -> a
    34:44:void main(java.lang.String[]) -> main
com.thealgorithms.sorts.LinkList_Sort -> com.a.p.t:
    11:11:void <init>() -> <init>
    14:106:boolean isSorted(int[],int) -> a
    110:113:boolean compare(int[],int[]) -> a
com.thealgorithms.sorts.MergeSort -> com.a.p.u:
    boolean $assertionsDisabled -> a
    8:8:void <init>() -> <init>
    19:20:java.lang.Comparable[] sort(java.lang.Comparable[]) -> a
    33:39:void doSort(java.lang.Comparable[],int,int) -> a
    56:80:void merge(java.lang.Comparable[],int,int,int) -> a
    86:99:void main(java.lang.String[]) -> main
    8:8:void <clinit>() -> <clinit>
com.thealgorithms.sorts.MergeSortNoExtraSpace -> com.a.p.v:
    9:9:void <init>() -> <init>
    12:14:void call_merge_sort(int[],int) -> a
    17:23:void merge_sort(int[],int,int,int) -> a
    32:59:void implement_merge_sort(int[],int,int,int,int) -> a
    62:74:void main(java.lang.String[]) -> main
com.thealgorithms.sorts.MergeSortRecursive -> com.a.p.w:
    java.util.List arr -> a
    11:13:void <init>(java.util.List) -> <init>
    16:18:void mergeSort() -> a
    22:35:java.util.List merge(java.util.List) -> a
    42:70:java.util.List sort(java.util.List,java.util.List) -> a
com.thealgorithms.sorts.MergeSortRecursive$1 -> com.a.p.w$1:
    java.util.List val$unsortedA -> a
    52:55:void <init>(java.util.List) -> <init>
com.thealgorithms.sorts.MergeSortRecursive$2 -> com.a.p.w$2:
    java.util.List val$unsortedB -> a
    62:65:void <init>(java.util.List) -> <init>
com.thealgorithms.sorts.Node -> com.a.p.x:
    int val -> a
    com.thealgorithms.sorts.Node next -> b
    129:129:void <init>() -> <init>
com.thealgorithms.sorts.OddEvenSort -> com.a.p.y:
    boolean $assertionsDisabled -> a
    6:6:void <init>() -> <init>
    9:27:void main(java.lang.String[]) -> main
    35:53:void oddEvenSort(int[]) -> a
    63:66:void swap(int[],int,int) -> a
    6:6:void <clinit>() -> <clinit>
com.thealgorithms.sorts.PancakeSort -> com.a.p.z:
    11:11:void <init>() -> <init>
    15:28:java.lang.Comparable[] sort(java.lang.Comparable[]) -> a
    32:66:void main(java.lang.String[]) -> main
com.thealgorithms.sorts.PigeonholeSort -> com.a.p.A:
    boolean $assertionsDisabled -> a
    7:7:void <init>() -> <init>
    15:38:void sort(java.lang.Integer[]) -> a
    41:54:void main(java.lang.String[]) -> main
    7:7:void <clinit>() -> <clinit>
com.thealgorithms.sorts.QuickSort -> com.a.p.B:
    10:10:void <init>() -> <init>
    19:20:java.lang.Comparable[] sort(java.lang.Comparable[]) -> a
    35:40:void doSort(java.lang.Comparable[],int,int) -> a
    55:57:int randomPartition(java.lang.Comparable[],int,int) -> b
    73:89:int partition(java.lang.Comparable[],int,int) -> c
com.thealgorithms.sorts.RadixSort -> com.a.p.C:
    5:5:void <init>() -> <init>
    8:14:int getMax(int[],int) -> b
    18:39:void countSort(int[],int,int) -> a
    42:47:void radixsort(int[],int) -> c
    50:53:void print(int[],int) -> a
    56:60:void main(java.lang.String[]) -> main
com.thealgorithms.sorts.SelectionSort -> com.a.p.D:
    boolean $assertionsDisabled -> a
    3:3:void <init>() -> <init>
    14:28:java.lang.Comparable[] sort(java.lang.Comparable[]) -> a
    35:47:void main(java.lang.String[]) -> main
    3:3:void <clinit>() -> <clinit>
com.thealgorithms.sorts.ShellSort -> com.a.p.E:
    boolean $assertionsDisabled -> a
    5:5:void <init>() -> <init>
    16:34:java.lang.Comparable[] sort(java.lang.Comparable[]) -> a
    39:47:void main(java.lang.String[]) -> main
    5:5:void <clinit>() -> <clinit>
com.thealgorithms.sorts.SimpleSort -> com.a.p.F:
    5:5:void <init>() -> <init>
    9:21:java.lang.Comparable[] sort(java.lang.Comparable[]) -> a
    26:54:void main(java.lang.String[]) -> main
com.thealgorithms.sorts.SlowSort -> com.a.p.G:
    7:7:void <init>() -> <init>
    11:12:java.lang.Comparable[] sort(java.lang.Comparable[]) -> a
    16:28:void sort(java.lang.Comparable[],int,int) -> a
com.thealgorithms.sorts.SortAlgorithm -> com.a.p.H:
    java.lang.Comparable[] sort(java.lang.Comparable[]) -> a
    28:29:java.util.List sort(java.util.List) -> a
com.thealgorithms.sorts.SortUtils -> com.a.p.I:
    11:11:void <init>() -> <init>
    21:24:boolean swap(java.lang.Object[],int,int) -> a
    35:35:boolean less(java.lang.Comparable,java.lang.Comparable) -> a
    46:46:boolean greater(java.lang.Comparable,java.lang.Comparable) -> b
    59:59:boolean greaterOrEqual(java.lang.Comparable,java.lang.Comparable) -> c
    68:75:void print(java.util.List) -> a
    83:84:void print(java.lang.Object[]) -> a
    98:101:void flip(java.lang.Comparable[],int,int) -> a
    71:71:java.lang.String lambda$print$0(java.lang.String) -> a
com.thealgorithms.sorts.StoogeSort -> com.a.p.J:
    7:7:void <init>() -> <init>
    11:12:java.lang.Comparable[] sort(java.lang.Comparable[]) -> a
    20:33:java.lang.Comparable[] sort(java.lang.Comparable[],int,int) -> a
    37:54:void main(java.lang.String[]) -> main
com.thealgorithms.sorts.StrandSort -> com.a.p.K:
    6:6:void <init>() -> <init>
    12:27:java.util.LinkedList strandSort(java.util.LinkedList) -> a
    34:43:java.util.LinkedList merge(java.util.LinkedList,java.util.LinkedList) -> a
com.thealgorithms.sorts.SwapSort -> com.a.p.L:
    12:12:void <init>() -> <init>
    16:32:java.lang.Comparable[] sort(java.lang.Comparable[]) -> a
    39:46:int getSmallerElementCount(java.lang.Comparable[],int) -> a
    51:79:void main(java.lang.String[]) -> main
com.thealgorithms.sorts.Task -> com.a.p.M:
    int[] a -> a
    136:136:void <init>() -> <init>
    141:157:com.thealgorithms.sorts.Node sort_by_mergesort(com.thealgorithms.sorts.Node) -> a
    161:166:int count(com.thealgorithms.sorts.Node) -> b
    172:179:void task(int[],int,int) -> a
    182:197:void task1(int[],int,int,int) -> a
com.thealgorithms.sorts.Task1 -> com.a.p.N:
    201:201:void <init>() -> <init>
    204:225:com.thealgorithms.sorts.Node sort_by_insertionsort(com.thealgorithms.sorts.Node) -> a
    230:234:int count(com.thealgorithms.sorts.Node) -> b
com.thealgorithms.sorts.Task2 -> com.a.p.O:
    int[] a -> a
    241:241:void <init>() -> <init>
    246:261:com.thealgorithms.sorts.Node sort_by_heapsort(com.thealgorithms.sorts.Node) -> a
    265:270:int count(com.thealgorithms.sorts.Node) -> b
    276:287:void task(int[]) -> a
    290:301:void task1(int[],int,int) -> a
com.thealgorithms.sorts.TimSort -> com.a.p.P:
    int[] array -> a
    int array_length -> b
    int RUN -> c
    boolean $assertionsDisabled -> d
    13:22:void <init>(int[]) -> <init>
    13:39:void <init>(int) -> <init>
    46:47:void change_run(int) -> a
    13:62:void <init>() -> <init>
    74:83:void insertion_sort(int[],int,int) -> a
    93:131:void merge_runs(int[],int,int,int) -> a
    138:174:void algorithm() -> a
    180:184:void showArrayElements() -> b
    190:219:void test() -> c
    222:223:void main(java.lang.String[]) -> main
    9:9:void <clinit>() -> <clinit>
com.thealgorithms.sorts.TopologicalSort -> com.a.p.Q:
    int time -> a
    15:15:void <init>() -> <init>
    119:125:java.util.LinkedList sort(com.thealgorithms.sorts.TopologicalSort$Graph) -> a
    144:168:java.lang.String sort(com.thealgorithms.sorts.TopologicalSort$Graph,com.thealgorithms.sorts.TopologicalSort$Vertex,java.util.LinkedList) -> a
    150:164:void lambda$sort$1(com.thealgorithms.sorts.TopologicalSort$Graph,com.thealgorithms.sorts.TopologicalSort$Vertex,java.util.LinkedList,java.lang.String) -> a
    121:124:void lambda$sort$0(java.util.LinkedList,com.thealgorithms.sorts.TopologicalSort$Graph,java.lang.String,com.thealgorithms.sorts.TopologicalSort$Vertex) -> a
com.thealgorithms.sorts.TopologicalSort$BackEdgeException -> com.a.p.R:
    92:96:void <init>(java.lang.String) -> <init>
com.thealgorithms.sorts.TopologicalSort$Color -> com.a.p.S:
    com.thealgorithms.sorts.TopologicalSort$Color WHITE -> a
    com.thealgorithms.sorts.TopologicalSort$Color GRAY -> b
    com.thealgorithms.sorts.TopologicalSort$Color BLACK -> c
    com.thealgorithms.sorts.TopologicalSort$Color[] $VALUES -> d
    20:20:com.thealgorithms.sorts.TopologicalSort$Color[] values() -> a
    20:20:com.thealgorithms.sorts.TopologicalSort$Color valueOf(java.lang.String) -> a
    20:20:void <init>(java.lang.String,int) -> <init>
    20:23:void <clinit>() -> <clinit>
com.thealgorithms.sorts.TopologicalSort$Graph -> com.a.p.T:
    java.util.HashMap adj -> a
    70:75:void <init>() -> <init>
    81:86:void addEdge(java.lang.String,java.lang.String[]) -> a
    70:70:java.util.HashMap access$000(com.thealgorithms.sorts.TopologicalSort$Graph) -> a
com.thealgorithms.sorts.TopologicalSort$Vertex -> com.a.p.U:
    java.lang.String label -> a
    int weight -> b
    int finished -> c
    com.thealgorithms.sorts.TopologicalSort$Vertex predecessor -> d
    com.thealgorithms.sorts.TopologicalSort$Color color -> e
    java.util.ArrayList next -> f
    55:64:void <init>(java.lang.String) -> <init>
com.thealgorithms.sorts.WiggleSort -> com.a.p.V:
    16:16:void <init>() -> <init>
    20:20:java.lang.Comparable[] sort(java.lang.Comparable[]) -> a
    24:24:int mapIndex(int,int) -> a
    38:54:void triColorSort(java.lang.Comparable[],java.lang.Comparable) -> a
    60:94:java.lang.Comparable[] wiggleSort(java.lang.Comparable[]) -> b
com.thealgorithms.strings.Alphabetical -> com.a.q.a:
    boolean $assertionsDisabled -> a
    8:8:void <init>() -> <init>
    11:16:void main(java.lang.String[]) -> main
    26:35:boolean isAlphabetical(java.lang.String) -> a
    8:8:void <clinit>() -> <clinit>
com.thealgorithms.strings.Anagrams -> com.a.q.b:
    13:13:void <init>() -> <init>
    17:47:void main(java.lang.String[]) -> main
    50:62:boolean approach1(java.lang.String,java.lang.String) -> a
    68:86:boolean approach2(java.lang.String,java.lang.String) -> b
    91:106:boolean approach3(java.lang.String,java.lang.String) -> c
    111:130:boolean approach4(java.lang.String,java.lang.String) -> d
com.thealgorithms.strings.CharactersSame -> com.a.q.c:
    boolean $assertionsDisabled -> a
    3:3:void <init>() -> <init>
    9:13:void main(java.lang.String[]) -> main
    23:28:boolean isAllCharactersSame(java.lang.String) -> a
    3:3:void <clinit>() -> <clinit>
com.thealgorithms.strings.CheckAnagrams -> com.a.q.d:
    boolean $assertionsDisabled -> a
    10:10:void <init>() -> <init>
    13:16:void main(java.lang.String[]) -> main
    26:51:boolean isAnagrams(java.lang.String,java.lang.String) -> a
    10:10:void <clinit>() -> <clinit>
com.thealgorithms.strings.CheckVowels -> com.a.q.e:
    java.util.Set VOWELS -> a
    12:12:void <init>() -> <init>
    25:34:boolean hasVowels(java.lang.String) -> a
    14:15:void <clinit>() -> <clinit>
com.thealgorithms.strings.HammingDistance -> com.a.q.f:
    7:7:void <init>() -> <init>
    19:31:int calculateHammingDistance(java.lang.String,java.lang.String) -> a
com.thealgorithms.strings.HorspoolSearch -> com.a.q.g:
    java.util.HashMap shiftValues -> a
    java.lang.Integer patternLength -> b
    int comparisons -> c
    47:47:void <init>() -> <init>
    61:61:int findFirst(java.lang.String,java.lang.String) -> a
    72:72:int findFirstInsensitive(java.lang.String,java.lang.String) -> b
    82:82:java.lang.Integer getLastComparisons() -> a
    100:129:int firstOccurrence(java.lang.String,java.lang.String,boolean) -> a
    141:144:boolean charEquals(char,char,boolean) -> a
    159:168:java.util.HashMap calcShiftValues(java.lang.String) -> a
    179:182:java.lang.Integer getShiftValue(char) -> a
    165:165:java.lang.Integer lambda$calcShiftValues$0(java.lang.String,int,java.lang.Character) -> a
    51:51:void <clinit>() -> <clinit>
com.thealgorithms.strings.Isomorphic -> com.a.q.h:
    5:5:void <init>() -> <init>
    8:32:boolean checkStrings(java.lang.String,java.lang.String) -> a
com.thealgorithms.strings.List_all_Possible_Words_From_Phone_Digits -> com.a.q.i:
    java.lang.Character[][] numberToCharMap -> a
    5:5:void <init>() -> <init>
    15:27:java.util.List printWords(int[],int,int,java.lang.String) -> a
    31:34:void printWords(int[]) -> a
    37:48:void generateNumberToCharMap() -> a
    52:54:void main(java.lang.String[]) -> main
com.thealgorithms.strings.LongestPalindromicSubstring -> com.a.q.j:
    6:6:void <init>() -> <init>
    9:17:void main(java.lang.String[]) -> main
com.thealgorithms.strings.Lower -> com.a.q.k:
    boolean $assertionsDisabled -> a
    3:3:void <init>() -> <init>
    9:13:void main(java.lang.String[]) -> main
    22:31:java.lang.String toLowerCase(java.lang.String) -> a
    3:3:void <clinit>() -> <clinit>
com.thealgorithms.strings.Palindrome -> com.a.q.l:
    boolean $assertionsDisabled -> a
    6:6:void <init>() -> <init>
    12:25:void main(java.lang.String[]) -> main
    35:37:boolean isPalindrome(java.lang.String) -> a
    49:57:boolean isPalindromeRecursion(java.lang.String) -> b
    68:76:boolean isPalindrome1(java.lang.String) -> c
    6:6:void <clinit>() -> <clinit>
com.thealgorithms.strings.Pangram -> com.a.q.m:
    boolean $assertionsDisabled -> a
    6:6:void <init>() -> <init>
    12:16:void main(java.lang.String[]) -> main
    25:37:boolean isPangram(java.lang.String) -> a
    6:6:void <clinit>() -> <clinit>
com.thealgorithms.strings.PermuteString -> com.a.q.n:
    14:14:void <init>() -> <init>
    18:23:java.lang.String swapString(java.lang.String,int,int) -> a
    27:31:void main(java.lang.String[]) -> main
    36:48:void generatePermutation(java.lang.String,int,int) -> b
com.thealgorithms.strings.ReverseString -> com.a.q.o:
    boolean $assertionsDisabled -> a
    6:6:void <init>() -> <init>
    9:11:void main(java.lang.String[]) -> main
    20:20:java.lang.String reverse(java.lang.String) -> a
    30:40:java.lang.String reverse2(java.lang.String) -> b
    6:6:void <clinit>() -> <clinit>
com.thealgorithms.strings.Rotation -> com.a.q.p:
    boolean $assertionsDisabled -> a
    9:9:void <init>() -> <init>
    12:17:void main(java.lang.String[]) -> main
    28:28:java.lang.String rotation(java.lang.String,int) -> a
    39:42:void rotation(char[],int) -> a
    52:59:void reverse(char[],int,int) -> a
    9:9:void <clinit>() -> <clinit>
com.thealgorithms.strings.Solution -> com.a.q.q:
    20:20:void <init>() -> <init>
    23:37:java.lang.String longestPalindrome(java.lang.String) -> a
    41:47:boolean isValid(java.lang.String,int,int) -> a
com.thealgorithms.strings.Upper -> com.a.q.r:
    boolean $assertionsDisabled -> a
    3:3:void <init>() -> <init>
    9:13:void main(java.lang.String[]) -> main
    22:34:java.lang.String toUpperCase(java.lang.String) -> a
    3:3:void <clinit>() -> <clinit>
com.thealgorithms.strings.WordLadder -> com.a.q.s:
    37:37:void <init>() -> <init>
    43:51:void main(java.lang.String[]) -> main
    68:107:int ladderLength(java.lang.String,java.lang.String,java.util.List) -> a
com.thealgorithms.strings.longestNonRepeativeSubstring -> com.a.q.t:
    5:5:void <init>() -> <init>
    8:38:int lengthOfLongestSubstring(java.lang.String) -> a
com.thealgorithms.strings.zigZagPattern.zigZagPattern -> com.a.q.a.a:
    3:3:void <init>() -> <init>
    6:29:java.lang.String encode(java.lang.String,int) -> a
